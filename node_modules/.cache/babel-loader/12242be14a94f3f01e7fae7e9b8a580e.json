{"ast":null,"code":"var _jsxFileName = \"/Users/ivopascoal/Desktop/Naughty/naughty_front/src/views/Nft/components/ClaimNftModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { Button, Modal, Text } from '@pancakeswap-libs/uikit';\nimport { getBalanceNumber } from 'utils/formatBalance';\nimport { RABBIT_MINTING_FARM_ADDRESS } from 'config/constants/nfts';\nimport { getCakeAddress } from 'utils/addressHelpers';\nimport useTokenBalance from 'hooks/useTokenBalance';\nimport useI18n from 'hooks/useI18n';\nimport { useRabbitMintingFarm } from 'hooks/useContract';\nimport InfoRow from './InfoRow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Value = styled(Text)`\n  font-weight: 600;\n`;\n_c = Value;\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`;\n_c2 = ModalContent;\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`;\n_c3 = Actions;\n\nconst ClaimNftModal = ({\n  nft,\n  onSuccess,\n  onDismiss\n}) => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const TranslateString = useI18n();\n  const {\n    account\n  } = useWallet();\n  const rabbitMintingContract = useRabbitMintingFarm(RABBIT_MINTING_FARM_ADDRESS);\n  const cakeBalance = useTokenBalance(getCakeAddress());\n  const cakeInWallet = getBalanceNumber(cakeBalance);\n\n  const handleConfirm = async () => {\n    try {\n      await rabbitMintingContract.methods.mintNFT(nft.bunnyId).send({\n        from: account\n      }).on('sending', () => {\n        setIsLoading(true);\n      }).on('receipt', () => {\n        onDismiss();\n        onSuccess();\n      }).on('error', () => {\n        console.error(error);\n        setError('Unable to claim NFT');\n        setIsLoading(false);\n      });\n    } catch (err) {\n      console.error('Unable to mint NFT:', err);\n    }\n  };\n\n  useEffect(() => {\n    if (cakeInWallet === 0) {\n      setError('You must have a CAKE balance greater than zero to claim NFT');\n    }\n  }, [cakeInWallet, setError]);\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: TranslateString(999, 'Claim NFT'),\n    onDismiss: onDismiss,\n    children: [/*#__PURE__*/_jsxDEV(ModalContent, {\n      children: [error && /*#__PURE__*/_jsxDEV(Text, {\n        color: \"failure\",\n        mb: \"8px\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(InfoRow, {\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          children: [TranslateString(999, 'You will receive'), \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Value, {\n          children: `1x \"${nft.name}\" NFT`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Actions, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        fullWidth: true,\n        variant: \"secondary\",\n        onClick: onDismiss,\n        children: TranslateString(462, 'Cancel')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        fullWidth: true,\n        onClick: handleConfirm,\n        disabled: !account || isLoading || cakeInWallet <= 0,\n        children: TranslateString(464, 'Confirm')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ClaimNftModal, \"TW4D5vYSBMpHQKGAVOAwnfYP9y4=\", false, function () {\n  return [useI18n, useWallet, useRabbitMintingFarm, useTokenBalance];\n});\n\n_c4 = ClaimNftModal;\nexport default ClaimNftModal;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Value\");\n$RefreshReg$(_c2, \"ModalContent\");\n$RefreshReg$(_c3, \"Actions\");\n$RefreshReg$(_c4, \"ClaimNftModal\");","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/Naughty/naughty_front/src/views/Nft/components/ClaimNftModal.tsx"],"names":["React","useEffect","useState","styled","useWallet","Button","Modal","Text","getBalanceNumber","RABBIT_MINTING_FARM_ADDRESS","getCakeAddress","useTokenBalance","useI18n","useRabbitMintingFarm","InfoRow","Value","ModalContent","div","Actions","ClaimNftModal","nft","onSuccess","onDismiss","isLoading","setIsLoading","error","setError","TranslateString","account","rabbitMintingContract","cakeBalance","cakeInWallet","handleConfirm","methods","mintNFT","bunnyId","send","from","on","console","err","name"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Button, Modal, Text } from '@pancakeswap-libs/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { RABBIT_MINTING_FARM_ADDRESS } from 'config/constants/nfts'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { Nft } from 'config/constants/types'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useRabbitMintingFarm } from 'hooks/useContract'\r\nimport InfoRow from './InfoRow'\r\n\r\ninterface ClaimNftModalProps {\r\n  nft: Nft\r\n  onSuccess: () => any\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst Value = styled(Text)`\r\n  font-weight: 600;\r\n`\r\n\r\nconst ModalContent = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 8px;\r\n`\r\n\r\nconst ClaimNftModal: React.FC<ClaimNftModalProps> = ({ nft, onSuccess, onDismiss }) => {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [error, setError] = useState(null)\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n  const rabbitMintingContract = useRabbitMintingFarm(RABBIT_MINTING_FARM_ADDRESS)\r\n  const cakeBalance = useTokenBalance(getCakeAddress())\r\n  const cakeInWallet = getBalanceNumber(cakeBalance)\r\n\r\n  const handleConfirm = async () => {\r\n    try {\r\n      await rabbitMintingContract.methods\r\n        .mintNFT(nft.bunnyId)\r\n        .send({ from: account })\r\n        .on('sending', () => {\r\n          setIsLoading(true)\r\n        })\r\n        .on('receipt', () => {\r\n          onDismiss()\r\n          onSuccess()\r\n        })\r\n        .on('error', () => {\r\n          console.error(error)\r\n          setError('Unable to claim NFT')\r\n          setIsLoading(false)\r\n        })\r\n    } catch (err) {\r\n      console.error('Unable to mint NFT:', err)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (cakeInWallet === 0) {\r\n      setError('You must have a CAKE balance greater than zero to claim NFT')\r\n    }\r\n  }, [cakeInWallet, setError])\r\n\r\n  return (\r\n    <Modal title={TranslateString(999, 'Claim NFT')} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        {error && (\r\n          <Text color=\"failure\" mb=\"8px\">\r\n            {error}\r\n          </Text>\r\n        )}\r\n        <InfoRow>\r\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\r\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\r\n        </InfoRow>\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || cakeInWallet <= 0}>\r\n          {TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ClaimNftModal\r\n"]},"metadata":{},"sourceType":"module"}