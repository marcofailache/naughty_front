{"ast":null,"code":"import _regeneratorRuntime from\"/Users/ivopascoal/Desktop/Naughty/naughty_front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/ivopascoal/Desktop/Naughty/naughty_front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/ivopascoal/Desktop/Naughty/naughty_front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"/Users/ivopascoal/Desktop/Naughty/naughty_front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject,_templateObject2,_templateObject3,_templateObject4,_templateObject5,_templateObject6;import React,{useState,useCallback}from'react';import styled from'styled-components';import{Heading,Card,CardBody,Button}from'@pancakeswap-libs/uikit';import{useWallet}from'@binance-chain/bsc-use-wallet';import useI18n from'hooks/useI18n';import BigNumber from'bignumber.js/bignumber';import{useAllHarvest}from'hooks/useHarvest';import useFarmsWithBalance from'hooks/useFarmsWithBalance';import UnlockButton from'components/UnlockButton';import CakeHarvestBalance from'./CakeHarvestBalance';import CakeWalletBalance from'./CakeWalletBalance';import NaughtyWalletBalance from'./NaughtyWalletBalance';import useAllEarnings from'../../../hooks/useAllEarnings';import{usePriceCakeBusd}from'../../../state/hooks';import{getCakeAddress,getNGHTYAddress}from'../../../utils/addressHelpers';import useTokenBalance from'../../../hooks/useTokenBalance';import{getBalanceNumber}from'../../../utils/formatBalance';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var StyledFarmStakingCard=styled(Card)(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  background-image: url('/images/egg/2a.gif');\\n  background-repeat: no-repeat;\\n  background-position: top right;\\n  min-height: 376px;\\n\"])));var Row=styled.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  align-items: center;\\n  display: flex;\\n  font-size: 18px;\\n  justify-content: space-around;\\n  margin-bottom: 8px;\\n\"])));var Block=styled.div(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n  margin-bottom: 16px;\\n\"])));var CardImage=styled.img(_templateObject4||(_templateObject4=_taggedTemplateLiteral([\"\\n  margin-bottom: 10px;\\n\"])));var Label=styled.div(_templateObject5||(_templateObject5=_taggedTemplateLiteral([\"\\n  color: \",\";\\n  font-size: 14px;\\n\"])),function(_ref){var theme=_ref.theme;return theme.colors.textSubtle;});var Actions=styled.div(_templateObject6||(_templateObject6=_taggedTemplateLiteral([\"\\n  margin-top: 24px;\\n\"])));var FarmedStakingCard=function FarmedStakingCard(){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),pendingTx=_useState2[0],setPendingTx=_useState2[1];var _useWallet=useWallet(),account=_useWallet.account;var TranslateString=useI18n();var farmsWithBalance=useFarmsWithBalance();var cakeBalance=getBalanceNumber(useTokenBalance(getCakeAddress()));var naughtyBalance=getBalanceNumber(useTokenBalance(getNGHTYAddress()));var eggPrice=usePriceCakeBusd().toNumber();var allEarnings=useAllEarnings();var earningsSum=allEarnings.reduce(function(accum,earning){return accum+new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber();},0);var balancesWithValue=farmsWithBalance.filter(function(balanceType){return balanceType.balance.toNumber()>0;});var _useAllHarvest=useAllHarvest(balancesWithValue.map(function(farmWithBalance){return farmWithBalance.pid;})),onReward=_useAllHarvest.onReward;var harvestAllFarms=useCallback(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:setPendingTx(true);_context.prev=1;_context.next=4;return onReward();case 4:_context.next=8;break;case 6:_context.prev=6;_context.t0=_context[\"catch\"](1);case 8:_context.prev=8;setPendingTx(false);return _context.finish(8);case 11:case\"end\":return _context.stop();}}},_callee,null,[[1,6,8,11]]);})),[onReward]);return/*#__PURE__*/_jsx(StyledFarmStakingCard,{children:/*#__PURE__*/_jsxs(CardBody,{children:[/*#__PURE__*/_jsx(Heading,{size:\"xl\",mb:\"24px\",children:TranslateString(542,'Farms & Staking')}),/*#__PURE__*/_jsx(CardImage,{src:\"/images/egg/2.png\",alt:\"cake logo\",width:64,height:64}),/*#__PURE__*/_jsxs(Block,{children:[/*#__PURE__*/_jsx(Label,{children:\" Naughty in Wallet\"}),/*#__PURE__*/_jsx(NaughtyWalletBalance,{naughtyBalance:naughtyBalance}),/*#__PURE__*/_jsxs(Label,{children:[\"~$\",(eggPrice*naughtyBalance).toFixed(2)]})]}),/*#__PURE__*/_jsxs(Block,{children:[/*#__PURE__*/_jsxs(Row,{children:[/*#__PURE__*/_jsx(Label,{children:\" Flix in Wallet\"}),/*#__PURE__*/_jsx(Label,{children:\" Flix to Harvest\"})]}),/*#__PURE__*/_jsxs(Row,{children:[/*#__PURE__*/_jsx(CakeWalletBalance,{cakeBalance:cakeBalance}),/*#__PURE__*/_jsx(CakeHarvestBalance,{earningsSum:earningsSum})]}),/*#__PURE__*/_jsxs(Row,{children:[/*#__PURE__*/_jsxs(Label,{children:[\"~$\",(eggPrice*cakeBalance).toFixed(2)]}),/*#__PURE__*/_jsxs(Label,{children:[\"~$\",(eggPrice*earningsSum).toFixed(2)]})]})]}),/*#__PURE__*/_jsx(Actions,{children:account?/*#__PURE__*/_jsx(Button,{id:\"harvest-all\",disabled:balancesWithValue.length<=0||pendingTx,onClick:harvestAllFarms,fullWidth:true,children:pendingTx?TranslateString(548,'Collecting EGG'):TranslateString(999,\"Harvest all (\".concat(balancesWithValue.length,\")\"))}):/*#__PURE__*/_jsx(UnlockButton,{fullWidth:true})})]})});};export default FarmedStakingCard;","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/Naughty/naughty_front/src/views/Home/components/FarmStakingCard.tsx"],"names":["React","useState","useCallback","styled","Heading","Card","CardBody","Button","useWallet","useI18n","BigNumber","useAllHarvest","useFarmsWithBalance","UnlockButton","CakeHarvestBalance","CakeWalletBalance","NaughtyWalletBalance","useAllEarnings","usePriceCakeBusd","getCakeAddress","getNGHTYAddress","useTokenBalance","getBalanceNumber","StyledFarmStakingCard","Row","div","Block","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","account","TranslateString","farmsWithBalance","cakeBalance","naughtyBalance","eggPrice","toNumber","allEarnings","earningsSum","reduce","accum","earning","pow","balancesWithValue","filter","balanceType","balance","map","farmWithBalance","pid","onReward","harvestAllFarms","toFixed","length"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useI18n from 'hooks/useI18n'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport { useAllHarvest } from 'hooks/useHarvest'\r\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport CakeHarvestBalance from './CakeHarvestBalance'\r\nimport CakeWalletBalance from './CakeWalletBalance'\r\nimport NaughtyWalletBalance from './NaughtyWalletBalance'\r\nimport useAllEarnings from '../../../hooks/useAllEarnings'\r\nimport { usePriceCakeBusd } from '../../../state/hooks'\r\nimport { getCakeAddress,getNGHTYAddress } from '../../../utils/addressHelpers'\r\nimport useTokenBalance from '../../../hooks/useTokenBalance'\r\nimport { getBalanceNumber } from '../../../utils/formatBalance'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  background-image: url('/images/egg/2a.gif');\r\n  background-repeat: no-repeat;\r\n  background-position: top right;\r\n  min-height: 376px;\r\n`\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 18px;\r\n  justify-content: space-around;\r\n  margin-bottom: 8px;\r\n`\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 10px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account } = useWallet()\r\n  const TranslateString = useI18n()\r\n  const farmsWithBalance = useFarmsWithBalance()\r\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\r\n  const naughtyBalance = getBalanceNumber(useTokenBalance(getNGHTYAddress()))\r\n  const eggPrice = usePriceCakeBusd().toNumber()\r\n  const allEarnings = useAllEarnings()\r\n  const earningsSum = allEarnings.reduce((accum, earning) => {\r\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\r\n  }, 0)\r\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\r\n\r\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\r\n\r\n  const harvestAllFarms = useCallback(async () => {\r\n    setPendingTx(true)\r\n    try {\r\n      await onReward()\r\n    } catch (error) {\r\n      // TODO: find a way to handle when the user rejects transaction or it fails\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n  }, [onReward])\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(542, 'Farms & Staking')}\r\n        </Heading>\r\n        <CardImage src=\"/images/egg/2.png\" alt=\"cake logo\" width={64} height={64} />\r\n        <Block>\r\n        <Label> Naughty in Wallet</Label>\r\n         <NaughtyWalletBalance naughtyBalance={naughtyBalance} />\r\n         <Label>~${(eggPrice * naughtyBalance).toFixed(2)}</Label>\r\n         </Block>\r\n         <Block>\r\n         <Row>\r\n          <Label> Flix in Wallet</Label>\r\n          <Label> Flix to Harvest</Label>\r\n          </Row>\r\n          <Row>\r\n          <CakeWalletBalance cakeBalance={cakeBalance} />\r\n          <CakeHarvestBalance earningsSum={earningsSum}/>\r\n          </Row>\r\n          <Row>\r\n          <Label>~${(eggPrice * cakeBalance).toFixed(2)}</Label>\r\n          <Label>~${(eggPrice * earningsSum).toFixed(2)}</Label>\r\n         </Row>\r\n        </Block>\r\n        <Actions>\r\n          {account ? (\r\n            <Button\r\n              id=\"harvest-all\"\r\n              disabled={balancesWithValue.length <= 0 || pendingTx}\r\n              onClick={harvestAllFarms}\r\n              fullWidth\r\n            >\r\n              {pendingTx\r\n                ? TranslateString(548, 'Collecting EGG')\r\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\r\n            </Button>\r\n          ) : (\r\n            <UnlockButton fullWidth />\r\n          )}\r\n        </Actions>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n"]},"metadata":{},"sourceType":"module"}