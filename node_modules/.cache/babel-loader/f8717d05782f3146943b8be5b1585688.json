{"ast":null,"code":"var _jsxFileName = \"/Users/ivopascoal/Desktop/Naughty/naughty_front/src/views/Farms/Farms.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useCallback, useState } from 'react';\nimport { Route, useRouteMatch } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport BigNumber from 'bignumber.js';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { Image, Heading } from '@pancakeswap-libs/uikit';\nimport { BLOCKS_PER_YEAR } from 'config';\nimport FlexLayout from 'components/layout/Flex';\nimport Page from 'components/layout/Page';\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks';\nimport useRefresh from 'hooks/useRefresh';\nimport { fetchFarmUserDataAsync } from 'state/actions';\nimport { QuoteToken } from 'config/constants/types';\nimport useI18n from 'hooks/useI18n';\nimport FarmCard from './components/FarmCard/FarmCard';\nimport FarmTabButtons from './components/FarmTabButtons';\nimport Divider from './components/Divider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Farms = farmsProps => {\n  _s();\n\n  const {\n    path\n  } = useRouteMatch();\n  const TranslateString = useI18n();\n  const farmsLP = useFarms();\n  const cakePrice = usePriceCakeBusd();\n  const bnbPrice = usePriceBnbBusd();\n  const {\n    account,\n    ethereum\n  } = useWallet();\n  console.log(account);\n  const {\n    tokenMode\n  } = farmsProps;\n  const dispatch = useDispatch();\n  const {\n    fastRefresh\n  } = useRefresh();\n  console.log(farmsLP);\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account));\n    }\n  }, [account, dispatch, fastRefresh]);\n  const [stakedOnly, setStakedOnly] = useState(false);\n  const activeFarms = farmsLP.filter(farm => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X' && !farm.lpSymbol.startsWith(\"RUG\"));\n  const inactiveFarms = farmsLP.filter(farm => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X');\n  const stakedOnlyFarms = activeFarms.filter(farm => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0));\n  const naughtyOnlyFarms = activeFarms.filter(farm => farm.lpSymbol.startsWith(\"NGTHY\"));\n  const rugOnlyFarms = activeFarms.filter(farm => farm.lpSymbol.startsWith(\"RUG\"));\n  const busdOnlyFarms = activeFarms.filter(farm => farm.lpSymbol.includes(\"BUSD\"));\n  const bnbOnlyFarms = activeFarms.filter(farm => farm.lpSymbol.includes(\"BNB\"));\n  const stakedBusdOnlyFarms = busdOnlyFarms.filter(farm => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0));\n  const stakedBnbOnlyFarms = bnbOnlyFarms.filter(farm => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0));\n  const stakedNaughtyOnlyFarms = naughtyOnlyFarms.filter(farm => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0));\n  const stakedRugOnlyFarms = rugOnlyFarms.filter(farm => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0)); // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n\n  const farmsList = useCallback((farmsToDisplay, removed) => {\n    // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n    const farmsToDisplayWithAPY = farmsToDisplay.map(farm => {\n      // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n      //   return farm\n      // }\n      const cakeRewardPerBlock = new BigNumber(farm.pastaPerBlock || 1).times(new BigNumber(farm.poolWeight)).div(new BigNumber(10).pow(18));\n      const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR);\n      const cakeRewardPerMonth = cakeRewardPerYear.div(12);\n      let apy = cakePrice.times(cakeRewardPerYear);\n\n      if (farm.quoteTokenSymbol === QuoteToken.NGTHY) {\n        apy = cakePrice.times(cakeRewardPerMonth);\n      }\n\n      let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0);\n\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n        totalValue = totalValue.times(bnbPrice);\n      }\n\n      if (totalValue.comparedTo(0) > 0) {\n        apy = apy.div(totalValue);\n      }\n\n      return { ...farm,\n        apy\n      };\n    });\n    return farmsToDisplayWithAPY.map(farm => /*#__PURE__*/_jsxDEV(FarmCard, {\n      farm: farm,\n      removed: removed,\n      bnbPrice: bnbPrice,\n      cakePrice: cakePrice,\n      ethereum: ethereum,\n      account: account\n    }, farm.pid, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this));\n  }, [bnbPrice, account, cakePrice, ethereum]); // stakedOnly={stakedOnly} setStakedOnly={setStakedOnly}\n  // pastaOnly={pastOnly} setPastaOnly={setPastaOnly}\n\n  return /*#__PURE__*/_jsxDEV(Page, {\n    children: [/*#__PURE__*/_jsxDEV(Heading, {\n      as: \"h1\",\n      size: \"lg\",\n      color: \"primary\",\n      mb: \"50px\",\n      style: {\n        textAlign: 'center'\n      },\n      children: tokenMode ? 'Dont waist your Naughty to watch the videos Stake tokens to earn NGTHY' : 'Stake your LP tokens to earn NGTHY'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Image, {\n      src: \"/images/egg/risk.png\",\n      width: 233,\n      height: 14\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Heading, {\n      as: \"h2\",\n      color: \"secondary\",\n      mb: \"50px\",\n      style: {\n        textAlign: 'center'\n      },\n      children: \"Dont waist your Naughty to watch the videos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FarmTabButtons, {\n      stakedOnly: stakedOnly,\n      setStakedOnly: setStakedOnly\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FlexLayout, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: `${path}`,\n          children: stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: `${path}/ngthy`,\n          children: stakedOnly ? farmsList(stakedNaughtyOnlyFarms, false) : farmsList(naughtyOnlyFarms, false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: `${path}/busd`,\n          children: stakedOnly ? farmsList(stakedBusdOnlyFarms, false) : farmsList(busdOnlyFarms, false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: `${path}/bnb`,\n          children: stakedOnly ? farmsList(stakedBnbOnlyFarms, false) : farmsList(bnbOnlyFarms, false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Image, {\n      src: \"/images/egg/8.png\",\n      alt: \"illustration\",\n      width: 1352,\n      height: 587,\n      responsive: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Farms, \"U7j0Q/3y0k3JMsUX/Kmgi5RmzpA=\", false, function () {\n  return [useRouteMatch, useI18n, useFarms, usePriceCakeBusd, usePriceBnbBusd, useWallet, useDispatch, useRefresh];\n});\n\n_c = Farms;\nexport default Farms;\n\nvar _c;\n\n$RefreshReg$(_c, \"Farms\");","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/Naughty/naughty_front/src/views/Farms/Farms.tsx"],"names":["React","useEffect","useCallback","useState","Route","useRouteMatch","useDispatch","BigNumber","useWallet","Image","Heading","BLOCKS_PER_YEAR","FlexLayout","Page","useFarms","usePriceBnbBusd","usePriceCakeBusd","useRefresh","fetchFarmUserDataAsync","QuoteToken","useI18n","FarmCard","FarmTabButtons","Divider","Farms","farmsProps","path","TranslateString","farmsLP","cakePrice","bnbPrice","account","ethereum","console","log","tokenMode","dispatch","fastRefresh","stakedOnly","setStakedOnly","activeFarms","filter","farm","isTokenOnly","multiplier","lpSymbol","startsWith","inactiveFarms","stakedOnlyFarms","userData","stakedBalance","isGreaterThan","naughtyOnlyFarms","rugOnlyFarms","busdOnlyFarms","includes","bnbOnlyFarms","stakedBusdOnlyFarms","stakedBnbOnlyFarms","stakedNaughtyOnlyFarms","stakedRugOnlyFarms","farmsList","farmsToDisplay","removed","farmsToDisplayWithAPY","map","cakeRewardPerBlock","pastaPerBlock","times","poolWeight","div","pow","cakeRewardPerYear","cakeRewardPerMonth","apy","quoteTokenSymbol","NGTHY","totalValue","lpTotalInQuoteToken","BNB","comparedTo","pid","textAlign"],"mappings":"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","sourcesContent":["import React, { useEffect, useCallback, useState } from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { Image, Heading } from '@pancakeswap-libs/uikit'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport Divider from './components/Divider'\n\nexport interface FarmsProps{\n  tokenMode?: boolean\n}\n\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const bnbPrice = usePriceBnbBusd()\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  console.log(account)\n  const {tokenMode} = farmsProps;\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  console.log(farmsLP)\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stakedOnly, setStakedOnly] = useState(false)\n\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X' && !farm.lpSymbol.startsWith(\"RUG\"))\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n  \n  const naughtyOnlyFarms = activeFarms.filter(\n    (farm) => farm.lpSymbol.startsWith(\"NGTHY\"),\n\n  )\n  const rugOnlyFarms = activeFarms.filter(\n    (farm) => farm.lpSymbol.startsWith(\"RUG\"),\n\n  )\n  const busdOnlyFarms = activeFarms.filter(\n    (farm) => farm.lpSymbol.includes(\"BUSD\") \n  )\n\n  const bnbOnlyFarms = activeFarms.filter(\n    (farm) => farm.lpSymbol.includes(\"BNB\") \n  )\n\n  const stakedBusdOnlyFarms = busdOnlyFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n  const stakedBnbOnlyFarms = bnbOnlyFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n  const stakedNaughtyOnlyFarms = naughtyOnlyFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n  const stakedRugOnlyFarms = rugOnlyFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n  \n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n        //   return farm\n        // }\n               const cakeRewardPerBlock = new BigNumber(farm.pastaPerBlock || 1).times(new BigNumber(farm.poolWeight)) .div(new BigNumber(10).pow(18))\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n        const cakeRewardPerMonth = cakeRewardPerYear.div(12)\n\n        let apy = cakePrice.times(cakeRewardPerYear);\n        if (farm.quoteTokenSymbol === QuoteToken.NGTHY) {\n          apy = cakePrice.times(cakeRewardPerMonth);\n        }\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0);\n\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n          totalValue = totalValue.times(bnbPrice);\n        }\n\n        if(totalValue.comparedTo(0) > 0){\n          apy = apy.div(totalValue);\n        }\n\n        return { ...farm, apy }\n      })\n      return farmsToDisplayWithAPY.map((farm) => (\n        <FarmCard\n          key={farm.pid}\n          farm={farm}\n          removed={removed}\n          bnbPrice={bnbPrice}\n          cakePrice={cakePrice}\n          ethereum={ethereum}\n          account={account}\n        />\n      ))\n    },\n    [bnbPrice, account, cakePrice, ethereum],\n  )\n\n// stakedOnly={stakedOnly} setStakedOnly={setStakedOnly}\n// pastaOnly={pastOnly} setPastaOnly={setPastaOnly}\n\n  return (\n    <Page>\n      \n      <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n        { \n          tokenMode ?\n            'Dont waist your Naughty to watch the videos Stake tokens to earn NGTHY'\n            :\n          'Stake your LP tokens to earn NGTHY'\n        }\n        \n      </Heading>\n      <Image src=\"/images/egg/risk.png\"  width={233} height={14} />\n      <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n        Dont waist your Naughty to watch the videos\n      </Heading>\n      <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly}/>\n      <div>\n        <Divider />\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\n          </Route>\n          \n          <Route exact path={`${path}/ngthy`}>\n          {stakedOnly ? farmsList(stakedNaughtyOnlyFarms, false) : farmsList(naughtyOnlyFarms, false)}\n          </Route>\n          <Route exact path={`${path}/busd`}>\n            {stakedOnly ? farmsList(stakedBusdOnlyFarms, false) : farmsList(busdOnlyFarms, false)}\n          </Route>\n          <Route exact path={`${path}/bnb`}>\n            {stakedOnly ? farmsList(stakedBnbOnlyFarms, false) : farmsList(bnbOnlyFarms, false)}\n          </Route>\n        </FlexLayout>\n      </div>\n      <Image src=\"/images/egg/8.png\" alt=\"illustration\" width={1352} height={587} responsive />\n    </Page>\n  )\n}\n\nexport default Farms\n"]},"metadata":{},"sourceType":"module"}