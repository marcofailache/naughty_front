{"ast":null,"code":"import getTimePeriods from'utils/getTimePeriods';// lottery draws UTC: 02:00 (10:00 SGT), 14:00 (22:00 SGT)\nvar lotteryDrawHoursUtc=[20];var getClosestLotteryHour=function getClosestLotteryHour(currentHour){switch(true){case currentHour<lotteryDrawHoursUtc[0]||currentHour>=lotteryDrawHoursUtc[1]:return lotteryDrawHoursUtc[0];case currentHour<lotteryDrawHoursUtc[1]:return lotteryDrawHoursUtc[1];default:return 0;}};var getNextLotteryDrawTime=function getNextLotteryDrawTime(currentMillis){var date=new Date(currentMillis);var currentHour=date.getUTCHours();var nextLotteryHour=getClosestLotteryHour(currentHour);// next lottery is tomorrow if the next lottery is at 2am UTC...\n// ...and current time is between 02:00am & 23:59pm UTC\nvar nextLotteryIsTomorrow=nextLotteryHour===20&&currentHour>=20&&currentHour<=23;var millisTimeOfNextDraw;if(nextLotteryIsTomorrow){var tomorrow=new Date(currentMillis);var nextDay=tomorrow.getUTCDate()+1;tomorrow.setUTCDate(nextDay);millisTimeOfNextDraw=tomorrow.setUTCHours(nextLotteryHour,0,0,0);}else{millisTimeOfNextDraw=date.setUTCHours(nextLotteryHour,0,0,0);}return millisTimeOfNextDraw;};// @ts-ignore\nvar getNextTicketSaleTime=function getNextTicketSaleTime(currentMillis){return(parseInt(currentMillis/3600000)+1)*3600000;};var hoursAndMinutesString=function hoursAndMinutesString(hours,minutes){return\"\".concat(parseInt(hours),\"h, \").concat(parseInt(minutes),\"m\");};export var getTicketSaleTime=function getTicketSaleTime(currentMillis){var nextTicketSaleTime=getNextTicketSaleTime(currentMillis);var msUntilNextTicketSale=nextTicketSaleTime-currentMillis;var _getTimePeriods=getTimePeriods(msUntilNextTicketSale/1000),minutes=_getTimePeriods.minutes;var _getTimePeriods2=getTimePeriods(msUntilNextTicketSale/1000),hours=_getTimePeriods2.hours;return hoursAndMinutesString(hours,minutes);};export var getLotteryDrawTime=function getLotteryDrawTime(currentMillis){var nextLotteryDrawTime=getNextLotteryDrawTime(currentMillis);var msUntilLotteryDraw=nextLotteryDrawTime-currentMillis;var _getTimePeriods3=getTimePeriods(msUntilLotteryDraw/1000),minutes=_getTimePeriods3.minutes;var _getTimePeriods4=getTimePeriods(msUntilLotteryDraw/1000),hours=_getTimePeriods4.hours;return hoursAndMinutesString(hours,minutes);};export var getTicketSaleStep=function getTicketSaleStep(){return 1/12*100;};export var getLotteryDrawStep=function getLotteryDrawStep(currentMillis){var msBetweenLotteries=43200000;var endTime=getNextLotteryDrawTime(currentMillis);var msUntilLotteryDraw=endTime-currentMillis;var percentageRemaining=msUntilLotteryDraw/msBetweenLotteries*100;return 100-percentageRemaining;};","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/Naughty/naughty_front/src/views/Lottery/helpers/CountdownHelpers.ts"],"names":["getTimePeriods","lotteryDrawHoursUtc","getClosestLotteryHour","currentHour","getNextLotteryDrawTime","currentMillis","date","Date","getUTCHours","nextLotteryHour","nextLotteryIsTomorrow","millisTimeOfNextDraw","tomorrow","nextDay","getUTCDate","setUTCDate","setUTCHours","getNextTicketSaleTime","parseInt","hoursAndMinutesString","hours","minutes","getTicketSaleTime","nextTicketSaleTime","msUntilNextTicketSale","getLotteryDrawTime","nextLotteryDrawTime","msUntilLotteryDraw","getTicketSaleStep","getLotteryDrawStep","msBetweenLotteries","endTime","percentageRemaining"],"mappings":"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","sourcesContent":["import getTimePeriods from 'utils/getTimePeriods'\r\n\r\n// lottery draws UTC: 02:00 (10:00 SGT), 14:00 (22:00 SGT)\r\nconst lotteryDrawHoursUtc = [20]\r\n\r\nconst getClosestLotteryHour = (currentHour) => {\r\n  switch (true) {\r\n    case currentHour < lotteryDrawHoursUtc[0] || currentHour >= lotteryDrawHoursUtc[1]:\r\n      return lotteryDrawHoursUtc[0]\r\n    case currentHour < lotteryDrawHoursUtc[1]:\r\n      return lotteryDrawHoursUtc[1]\r\n    default:\r\n      return 0\r\n  }\r\n}\r\n\r\nconst getNextLotteryDrawTime = (currentMillis) => {\r\n  const date = new Date(currentMillis)\r\n  const currentHour = date.getUTCHours()\r\n  const nextLotteryHour = getClosestLotteryHour(currentHour)\r\n  // next lottery is tomorrow if the next lottery is at 2am UTC...\r\n  // ...and current time is between 02:00am & 23:59pm UTC\r\n  const nextLotteryIsTomorrow = nextLotteryHour === 20 && currentHour >= 20 && currentHour <= 23\r\n  let millisTimeOfNextDraw\r\n\r\n  if (nextLotteryIsTomorrow) {\r\n    const tomorrow = new Date(currentMillis)\r\n    const nextDay = tomorrow.getUTCDate() + 1\r\n    tomorrow.setUTCDate(nextDay)\r\n    millisTimeOfNextDraw = tomorrow.setUTCHours(nextLotteryHour, 0, 0, 0)\r\n  } else {\r\n    millisTimeOfNextDraw = date.setUTCHours(nextLotteryHour, 0, 0, 0)\r\n  }\r\n\r\n  return millisTimeOfNextDraw\r\n}\r\n\r\n// @ts-ignore\r\nconst getNextTicketSaleTime = (currentMillis) => (parseInt(currentMillis / 3600000) + 1) * 3600000\r\nconst hoursAndMinutesString = (hours, minutes) => `${parseInt(hours)}h, ${parseInt(minutes)}m`\r\n\r\nexport const getTicketSaleTime = (currentMillis): string => {\r\n  const nextTicketSaleTime = getNextTicketSaleTime(currentMillis)\r\n  const msUntilNextTicketSale = nextTicketSaleTime - currentMillis\r\n  const { minutes } = getTimePeriods(msUntilNextTicketSale / 1000)\r\n  const { hours } = getTimePeriods(msUntilNextTicketSale / 1000)\r\n  return hoursAndMinutesString(hours, minutes)\r\n}\r\n\r\nexport const getLotteryDrawTime = (currentMillis): string => {\r\n  const nextLotteryDrawTime = getNextLotteryDrawTime(currentMillis)\r\n  const msUntilLotteryDraw = nextLotteryDrawTime - currentMillis\r\n  const { minutes } = getTimePeriods(msUntilLotteryDraw / 1000)\r\n  const { hours } = getTimePeriods(msUntilLotteryDraw / 1000)\r\n  return hoursAndMinutesString(hours, minutes)\r\n}\r\n\r\nexport const getTicketSaleStep = () => (1 / 12) * 100\r\n\r\nexport const getLotteryDrawStep = (currentMillis) => {\r\n  const msBetweenLotteries = 43200000\r\n  const endTime = getNextLotteryDrawTime(currentMillis)\r\n  const msUntilLotteryDraw = endTime - currentMillis\r\n  const percentageRemaining = (msUntilLotteryDraw / msBetweenLotteries) * 100\r\n  return 100 - percentageRemaining\r\n}\r\n"]},"metadata":{},"sourceType":"module"}