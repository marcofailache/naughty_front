{"ast":null,"code":"var _jsxFileName = \"/Users/ivopascoal/Desktop/Naughty/naughty_front/src/views/Nft/components/BurnNftModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { Button, Checkbox, Modal, Text } from '@pancakeswap-libs/uikit';\nimport useI18n from 'hooks/useI18n';\nimport { RABBIT_MINTING_FARM_ADDRESS } from 'config/constants/nfts';\nimport { useRabbitMintingFarm } from 'hooks/useContract';\nimport InfoRow from './InfoRow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Value = styled(Text)`\n  font-weight: 600;\n`;\n_c = Value;\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`;\n_c2 = ModalContent;\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`;\n_c3 = Actions;\n\nconst BurnNftModal = ({\n  nft,\n  tokenIds,\n  onSuccess,\n  onDismiss\n}) => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [accepted, setAccepted] = useState(false);\n  const TranslateString = useI18n();\n  const {\n    account\n  } = useWallet();\n  const rabbitMintingContract = useRabbitMintingFarm(RABBIT_MINTING_FARM_ADDRESS);\n\n  const handleConfirm = async () => {\n    try {\n      const [tokenId] = tokenIds;\n      await rabbitMintingContract.methods.burnNFT(tokenId).send({\n        from: account\n      }).on('sending', () => {\n        setIsLoading(true);\n      }).on('receipt', () => {\n        onDismiss();\n        onSuccess();\n      }).on('error', () => {\n        console.error(error);\n        setError('Unable to burn NFT');\n        setIsLoading(false);\n      });\n    } catch (err) {\n      console.error('Unable to burn NFT:', err);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: TranslateString(999, 'Trade in NFT'),\n    onDismiss: onDismiss,\n    children: [/*#__PURE__*/_jsxDEV(ModalContent, {\n      children: [error && /*#__PURE__*/_jsxDEV(Text, {\n        color: \"failure\",\n        mb: \"8px\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(InfoRow, {\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          children: [TranslateString(999, 'Trade in'), \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Value, {\n          children: `1x \"${nft.name}\" NFT`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InfoRow, {\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          children: [TranslateString(999, 'You will receive'), \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Value, {\n          children: \"10 CAKE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalContent, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        color: \"failure\",\n        children: TranslateString(999, 'When you trade in this NFT to receive CAKE, you will lose access to it forever!')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        color: \"failure\",\n        children: TranslateString(999, 'It will be burned and removed from circulation')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalContent, {\n      style: {\n        alignItems: 'center',\n        display: 'inline-flex'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n        checked: accepted,\n        scale: \"sm\",\n        onChange: () => setAccepted(!accepted)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        ml: \"8px\",\n        onClick: () => setAccepted(!accepted),\n        style: {\n          cursor: 'pointer'\n        },\n        children: TranslateString(999, 'I understand')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Actions, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        fullWidth: true,\n        variant: \"secondary\",\n        onClick: onDismiss,\n        children: TranslateString(462, 'Cancel')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        fullWidth: true,\n        onClick: handleConfirm,\n        disabled: !account || isLoading || !accepted,\n        children: TranslateString(464, 'Confirm')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BurnNftModal, \"od8RIgWGAy8b+kLugpypfUx08dY=\", false, function () {\n  return [useI18n, useWallet, useRabbitMintingFarm];\n});\n\n_c4 = BurnNftModal;\nexport default BurnNftModal;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Value\");\n$RefreshReg$(_c2, \"ModalContent\");\n$RefreshReg$(_c3, \"Actions\");\n$RefreshReg$(_c4, \"BurnNftModal\");","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/Naughty/naughty_front/src/views/Nft/components/BurnNftModal.tsx"],"names":["React","useState","styled","useWallet","Button","Checkbox","Modal","Text","useI18n","RABBIT_MINTING_FARM_ADDRESS","useRabbitMintingFarm","InfoRow","Value","ModalContent","div","Actions","BurnNftModal","nft","tokenIds","onSuccess","onDismiss","isLoading","setIsLoading","error","setError","accepted","setAccepted","TranslateString","account","rabbitMintingContract","handleConfirm","tokenId","methods","burnNFT","send","from","on","console","err","name","alignItems","display","cursor"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Button, Checkbox, Modal, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { Nft } from 'config/constants/types'\r\nimport { RABBIT_MINTING_FARM_ADDRESS } from 'config/constants/nfts'\r\nimport { useRabbitMintingFarm } from 'hooks/useContract'\r\nimport InfoRow from './InfoRow'\r\n\r\ninterface BurnNftModalProps {\r\n  nft: Nft\r\n  tokenIds: number[]\r\n  onSuccess: () => any\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst Value = styled(Text)`\r\n  font-weight: 600;\r\n`\r\n\r\nconst ModalContent = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 8px;\r\n`\r\n\r\nconst BurnNftModal: React.FC<BurnNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [error, setError] = useState(null)\r\n  const [accepted, setAccepted] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n  const rabbitMintingContract = useRabbitMintingFarm(RABBIT_MINTING_FARM_ADDRESS)\r\n\r\n  const handleConfirm = async () => {\r\n    try {\r\n      const [tokenId] = tokenIds\r\n\r\n      await rabbitMintingContract.methods\r\n        .burnNFT(tokenId)\r\n        .send({ from: account })\r\n        .on('sending', () => {\r\n          setIsLoading(true)\r\n        })\r\n        .on('receipt', () => {\r\n          onDismiss()\r\n          onSuccess()\r\n        })\r\n        .on('error', () => {\r\n          console.error(error)\r\n          setError('Unable to burn NFT')\r\n          setIsLoading(false)\r\n        })\r\n    } catch (err) {\r\n      console.error('Unable to burn NFT:', err)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal title={TranslateString(999, 'Trade in NFT')} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        {error && (\r\n          <Text color=\"failure\" mb=\"8px\">\r\n            {error}\r\n          </Text>\r\n        )}\r\n        <InfoRow>\r\n          <Text>{TranslateString(999, 'Trade in')}:</Text>\r\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\r\n        </InfoRow>\r\n        <InfoRow>\r\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\r\n          <Value>10 CAKE</Value>\r\n        </InfoRow>\r\n      </ModalContent>\r\n      <ModalContent>\r\n        <Text color=\"failure\">\r\n          {TranslateString(999, 'When you trade in this NFT to receive CAKE, you will lose access to it forever!')}\r\n        </Text>\r\n        <Text color=\"failure\">{TranslateString(999, 'It will be burned and removed from circulation')}</Text>\r\n      </ModalContent>\r\n      <ModalContent style={{ alignItems: 'center', display: 'inline-flex' }}>\r\n        <Checkbox checked={accepted} scale=\"sm\" onChange={() => setAccepted(!accepted)} />\r\n        <Text ml=\"8px\" onClick={() => setAccepted(!accepted)} style={{ cursor: 'pointer' }}>\r\n          {TranslateString(999, 'I understand')}\r\n        </Text>\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !accepted}>\r\n          {TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default BurnNftModal\r\n"]},"metadata":{},"sourceType":"module"}