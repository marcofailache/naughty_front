{"ast":null,"code":"import _regeneratorRuntime from\"/Users/ivopascoal/Desktop/Naughty/naughty_front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/ivopascoal/Desktop/Naughty/naughty_front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/ivopascoal/Desktop/Naughty/naughty_front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useContext,useEffect,useState}from'react';import PastLotteryDataContext from'contexts/PastLotteryDataContext';import getLotteryRoundData from'utils/getLotteryRoundData';var useGetRecentLotteryRoundData=function useGetRecentLotteryRoundData(){var _useState=useState(true),_useState2=_slicedToArray(_useState,2),isLoading=_useState2[0],setIsLoading=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),data=_useState4[0],setData=_useState4[1];var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),error=_useState6[0],setError=_useState6[1];var _useContext=useContext(PastLotteryDataContext),mostRecentLotteryNumber=_useContext.mostRecentLotteryNumber;useEffect(function(){var fetchRecentLotteryData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var roundData;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;setIsLoading(true);_context.next=4;return getLotteryRoundData(mostRecentLotteryNumber);case 4:roundData=_context.sent;setData(roundData);_context.next=11;break;case 8:_context.prev=8;_context.t0=_context[\"catch\"](0);setError(_context.t0);case 11:_context.prev=11;setIsLoading(false);return _context.finish(11);case 14:case\"end\":return _context.stop();}}},_callee,null,[[0,8,11,14]]);}));return function fetchRecentLotteryData(){return _ref.apply(this,arguments);};}();if(mostRecentLotteryNumber>0){fetchRecentLotteryData();}},[mostRecentLotteryNumber,setData,setIsLoading,setError]);return{isLoading:isLoading,data:data,mostRecentLotteryNumber:mostRecentLotteryNumber,error:error};};export default useGetRecentLotteryRoundData;","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/Naughty/naughty_front/src/views/Lottery/hooks/useGetRecentLotteryRoundData.ts"],"names":["useContext","useEffect","useState","PastLotteryDataContext","getLotteryRoundData","useGetRecentLotteryRoundData","isLoading","setIsLoading","data","setData","error","setError","mostRecentLotteryNumber","fetchRecentLotteryData","roundData"],"mappings":"+eAAA,OAASA,UAAT,CAAqBC,SAArB,CAAgCC,QAAhC,KAAgD,OAAhD,CACA,MAAOC,CAAAA,sBAAP,KAAmC,iCAAnC,CACA,MAAOC,CAAAA,mBAAP,KAAkD,2BAAlD,CASA,GAAMC,CAAAA,4BAA4B,CAAG,QAA/BA,CAAAA,4BAA+B,EAAuC,CAC1E,cAAkCH,QAAQ,CAAC,IAAD,CAA1C,wCAAOI,SAAP,eAAkBC,YAAlB,eACA,eAAwBL,QAAQ,CAAC,IAAD,CAAhC,yCAAOM,IAAP,eAAaC,OAAb,eACA,eAA0BP,QAAQ,CAAC,IAAD,CAAlC,yCAAOQ,KAAP,eAAcC,QAAd,eACA,gBAAoCX,UAAU,CAACG,sBAAD,CAA9C,CAAQS,uBAAR,aAAQA,uBAAR,CAEAX,SAAS,CAAC,UAAM,CACd,GAAMY,CAAAA,sBAAsB,0FAAG,iKAE3BN,YAAY,CAAC,IAAD,CAAZ,CAF2B,sBAIHH,CAAAA,mBAAmB,CAACQ,uBAAD,CAJhB,QAIrBE,SAJqB,eAK3BL,OAAO,CAACK,SAAD,CAAP,CAL2B,+EAO3BH,QAAQ,aAAR,CAP2B,yBAS3BJ,YAAY,CAAC,KAAD,CAAZ,CAT2B,qGAAH,kBAAtBM,CAAAA,sBAAsB,0CAA5B,CAaA,GAAID,uBAAuB,CAAG,CAA9B,CAAiC,CAC/BC,sBAAsB,GACvB,CACF,CAjBQ,CAiBN,CAACD,uBAAD,CAA0BH,OAA1B,CAAmCF,YAAnC,CAAiDI,QAAjD,CAjBM,CAAT,CAmBA,MAAO,CAAEL,SAAS,CAATA,SAAF,CAAaE,IAAI,CAAJA,IAAb,CAAmBI,uBAAuB,CAAvBA,uBAAnB,CAA4CF,KAAK,CAALA,KAA5C,CAAP,CACD,CA1BD,CA4BA,cAAeL,CAAAA,4BAAf","sourcesContent":["import { useContext, useEffect, useState } from 'react'\r\nimport PastLotteryDataContext from 'contexts/PastLotteryDataContext'\r\nimport getLotteryRoundData, { DataResponse } from 'utils/getLotteryRoundData'\r\n\r\ntype GetRecentLotteryRoundDataReturn = {\r\n  isLoading: boolean\r\n  data: DataResponse\r\n  mostRecentLotteryNumber: number\r\n  error: any\r\n}\r\n\r\nconst useGetRecentLotteryRoundData = (): GetRecentLotteryRoundDataReturn => {\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const [data, setData] = useState(null)\r\n  const [error, setError] = useState(null)\r\n  const { mostRecentLotteryNumber } = useContext(PastLotteryDataContext)\r\n\r\n  useEffect(() => {\r\n    const fetchRecentLotteryData = async () => {\r\n      try {\r\n        setIsLoading(true)\r\n\r\n        const roundData = await getLotteryRoundData(mostRecentLotteryNumber)\r\n        setData(roundData)\r\n      } catch (err) {\r\n        setError(err)\r\n      } finally {\r\n        setIsLoading(false)\r\n      }\r\n    }\r\n\r\n    if (mostRecentLotteryNumber > 0) {\r\n      fetchRecentLotteryData()\r\n    }\r\n  }, [mostRecentLotteryNumber, setData, setIsLoading, setError])\r\n\r\n  return { isLoading, data, mostRecentLotteryNumber, error }\r\n}\r\n\r\nexport default useGetRecentLotteryRoundData\r\n"]},"metadata":{},"sourceType":"module"}