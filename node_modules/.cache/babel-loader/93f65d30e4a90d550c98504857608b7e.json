{"ast":null,"code":"import _regeneratorRuntime from\"/Users/ivopascoal/Desktop/Naughty/naughty_front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/ivopascoal/Desktop/Naughty/naughty_front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/ivopascoal/Desktop/Naughty/naughty_front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"/Users/ivopascoal/Desktop/Naughty/naughty_front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject,_templateObject2,_templateObject3;import React,{useEffect,useState}from'react';import styled from'styled-components';import{useWallet}from'@binance-chain/bsc-use-wallet';import{Button,Modal,Text}from'@pancakeswap-libs/uikit';import{getBalanceNumber}from'utils/formatBalance';import{RABBIT_MINTING_FARM_ADDRESS}from'config/constants/nfts';import{getCakeAddress}from'utils/addressHelpers';import useTokenBalance from'hooks/useTokenBalance';import useI18n from'hooks/useI18n';import{useRabbitMintingFarm}from'hooks/useContract';import InfoRow from'./InfoRow';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Value=styled(Text)(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  font-weight: 600;\\n\"])));var ModalContent=styled.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  margin-bottom: 16px;\\n\"])));var Actions=styled.div(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n  display: grid;\\n  grid-template-columns: repeat(2, 1fr);\\n  grid-gap: 8px;\\n\"])));var ClaimNftModal=function ClaimNftModal(_ref){var nft=_ref.nft,onSuccess=_ref.onSuccess,onDismiss=_ref.onDismiss;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isLoading=_useState2[0],setIsLoading=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),error=_useState4[0],setError=_useState4[1];var TranslateString=useI18n();var _useWallet=useWallet(),account=_useWallet.account;var rabbitMintingContract=useRabbitMintingFarm(RABBIT_MINTING_FARM_ADDRESS);var cakeBalance=useTokenBalance(getCakeAddress());var cakeInWallet=getBalanceNumber(cakeBalance);var handleConfirm=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return rabbitMintingContract.methods.mintNFT(nft.bunnyId).send({from:account}).on('sending',function(){setIsLoading(true);}).on('receipt',function(){onDismiss();onSuccess();}).on('error',function(){console.error(error);setError('Unable to claim NFT');setIsLoading(false);});case 3:_context.next=8;break;case 5:_context.prev=5;_context.t0=_context[\"catch\"](0);console.error('Unable to mint NFT:',_context.t0);case 8:case\"end\":return _context.stop();}}},_callee,null,[[0,5]]);}));return function handleConfirm(){return _ref2.apply(this,arguments);};}();useEffect(function(){if(cakeInWallet===0){setError('You must have a CAKE balance greater than zero to claim NFT');}},[cakeInWallet,setError]);return/*#__PURE__*/_jsxs(Modal,{title:TranslateString(999,'Claim NFT'),onDismiss:onDismiss,children:[/*#__PURE__*/_jsxs(ModalContent,{children:[error&&/*#__PURE__*/_jsx(Text,{color:\"failure\",mb:\"8px\",children:error}),/*#__PURE__*/_jsxs(InfoRow,{children:[/*#__PURE__*/_jsxs(Text,{children:[TranslateString(999,'You will receive'),\":\"]}),/*#__PURE__*/_jsx(Value,{children:\"1x \\\"\".concat(nft.name,\"\\\" NFT\")})]})]}),/*#__PURE__*/_jsxs(Actions,{children:[/*#__PURE__*/_jsx(Button,{fullWidth:true,variant:\"secondary\",onClick:onDismiss,children:TranslateString(462,'Cancel')}),/*#__PURE__*/_jsx(Button,{fullWidth:true,onClick:handleConfirm,disabled:!account||isLoading||cakeInWallet<=0,children:TranslateString(464,'Confirm')})]})]});};export default ClaimNftModal;","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/Naughty/naughty_front/src/views/Nft/components/ClaimNftModal.tsx"],"names":["React","useEffect","useState","styled","useWallet","Button","Modal","Text","getBalanceNumber","RABBIT_MINTING_FARM_ADDRESS","getCakeAddress","useTokenBalance","useI18n","useRabbitMintingFarm","InfoRow","Value","ModalContent","div","Actions","ClaimNftModal","nft","onSuccess","onDismiss","isLoading","setIsLoading","error","setError","TranslateString","account","rabbitMintingContract","cakeBalance","cakeInWallet","handleConfirm","methods","mintNFT","bunnyId","send","from","on","console","name"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Button, Modal, Text } from '@pancakeswap-libs/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { RABBIT_MINTING_FARM_ADDRESS } from 'config/constants/nfts'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { Nft } from 'config/constants/types'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useRabbitMintingFarm } from 'hooks/useContract'\r\nimport InfoRow from './InfoRow'\r\n\r\ninterface ClaimNftModalProps {\r\n  nft: Nft\r\n  onSuccess: () => any\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst Value = styled(Text)`\r\n  font-weight: 600;\r\n`\r\n\r\nconst ModalContent = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 8px;\r\n`\r\n\r\nconst ClaimNftModal: React.FC<ClaimNftModalProps> = ({ nft, onSuccess, onDismiss }) => {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [error, setError] = useState(null)\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n  const rabbitMintingContract = useRabbitMintingFarm(RABBIT_MINTING_FARM_ADDRESS)\r\n  const cakeBalance = useTokenBalance(getCakeAddress())\r\n  const cakeInWallet = getBalanceNumber(cakeBalance)\r\n\r\n  const handleConfirm = async () => {\r\n    try {\r\n      await rabbitMintingContract.methods\r\n        .mintNFT(nft.bunnyId)\r\n        .send({ from: account })\r\n        .on('sending', () => {\r\n          setIsLoading(true)\r\n        })\r\n        .on('receipt', () => {\r\n          onDismiss()\r\n          onSuccess()\r\n        })\r\n        .on('error', () => {\r\n          console.error(error)\r\n          setError('Unable to claim NFT')\r\n          setIsLoading(false)\r\n        })\r\n    } catch (err) {\r\n      console.error('Unable to mint NFT:', err)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (cakeInWallet === 0) {\r\n      setError('You must have a CAKE balance greater than zero to claim NFT')\r\n    }\r\n  }, [cakeInWallet, setError])\r\n\r\n  return (\r\n    <Modal title={TranslateString(999, 'Claim NFT')} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        {error && (\r\n          <Text color=\"failure\" mb=\"8px\">\r\n            {error}\r\n          </Text>\r\n        )}\r\n        <InfoRow>\r\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\r\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\r\n        </InfoRow>\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || cakeInWallet <= 0}>\r\n          {TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ClaimNftModal\r\n"]},"metadata":{},"sourceType":"module"}