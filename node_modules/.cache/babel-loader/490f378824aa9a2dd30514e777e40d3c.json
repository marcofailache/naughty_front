{"ast":null,"code":"/* eslint-disable no-await-in-loop */\nimport BigNumber from 'bignumber.js';\nimport { Interface } from '@ethersproject/abi';\nimport { getWeb3 } from 'utils/web3';\nimport MultiCallAbi from 'config/abi/Multicall.json';\nimport ticketAbi from 'config/abi/lotteryNft.json';\nimport lotteryAbi from 'config/abi/lottery.json';\nimport { getMulticallAddress } from './addressHelpers';\nexport const multiCall = async (abi, calls) => {\n  const web3 = getWeb3();\n  const multi = new web3.eth.Contract(MultiCallAbi, getMulticallAddress());\n  const itf = new Interface(abi);\n  let res = [];\n\n  if (calls.length > 100) {\n    let i = 0;\n\n    while (i < calls.length / 100) {\n      const newCalls = calls.slice(i * 100, 100 * (i + 1));\n      const calldata = newCalls.map(call => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])]);\n      const {\n        returnData\n      } = await multi.methods.aggregate(calldata).call();\n      i++;\n      res = res.concat(returnData.map((call, index) => itf.decodeFunctionResult(newCalls[index][1], call)));\n    }\n  } else {\n    const calldata = calls.map(call => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])]);\n    const {\n      returnData\n    } = await multi.methods.aggregate(calldata).call();\n    res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i][1], call));\n  }\n\n  return res;\n};\nexport const multiBuy = async (lotteryContract, price, numbersList, account) => {\n  try {\n    return lotteryContract.methods.multiBuy(new BigNumber(price).times(new BigNumber(10).pow(18)).toString(), numbersList).send({\n      from: account\n    }).on('transactionHash', tx => {\n      return tx.transactionHash;\n    });\n  } catch (err) {\n    return console.error(err);\n  }\n};\nexport const getTickets = async (lotteryContract, ticketsContract, account, customLotteryNum) => {\n  const issueIdex = customLotteryNum || (await lotteryContract.methods.issueIndex().call());\n  const length = await getTicketsAmount(ticketsContract, account); // eslint-disable-next-line prefer-spread\n\n  const calls1 = Array.apply(null, {\n    length\n  }).map((a, i) => [ticketsContract.options.address, 'tokenOfOwnerByIndex', [account, i]]);\n  const res = await multiCall(ticketAbi, calls1);\n  const tokenIds = res.map(id => id.toString());\n  const calls2 = tokenIds.map(id => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]]);\n  const ticketIssues = await multiCall(ticketAbi, calls2);\n  const finalTokenids = [];\n  ticketIssues.forEach(async (ticketIssue, i) => {\n    if (ticketIssue.toString() === issueIdex) {\n      finalTokenids.push(tokenIds[i]);\n    }\n  });\n  const calls3 = finalTokenids.map(id => [ticketsContract.options.address, 'getLotteryNumbers', [id]]);\n  const tickets = await multiCall(ticketAbi, calls3);\n  await getLotteryStatus(lotteryContract);\n  return tickets;\n};\nexport const getTicketsAmount = async (ticketsContract, account) => {\n  return ticketsContract.methods.balanceOf(account).call();\n};\nexport const multiClaim = async (lotteryContract, ticketsContract, account) => {\n  await lotteryContract.methods.issueIndex().call();\n  const length = await getTicketsAmount(ticketsContract, account); // eslint-disable-next-line prefer-spread\n\n  const calls1 = Array.apply(null, {\n    length\n  }).map((a, i) => [ticketsContract.options.address, 'tokenOfOwnerByIndex', [account, i]]);\n  const res = await multiCall(ticketAbi, calls1);\n  const tokenIds = res.map(id => id.toString());\n  const calls2 = tokenIds.map(id => [ticketsContract.options.address, 'getClaimStatus', [id]]);\n  const claimedStatus = await multiCall(ticketAbi, calls2);\n  const unClaimedIds = tokenIds.filter((id, index) => !claimedStatus[index][0]);\n  const calls3 = unClaimedIds.map(id => [lotteryContract.options.address, 'getRewardView', [id]]);\n  const rewards = await multiCall(lotteryAbi, calls3);\n  let finanltokenIds = [];\n  rewards.forEach((r, i) => {\n    if (r > 0) {\n      finanltokenIds.push(unClaimedIds[i]);\n    }\n  });\n\n  if (finanltokenIds.length > 200) {\n    finanltokenIds = finanltokenIds.slice(0, 200);\n  }\n\n  try {\n    return lotteryContract.methods.multiClaim(finanltokenIds).send({\n      from: account\n    }).on('transactionHash', tx => {\n      return tx.transactionHash;\n    });\n  } catch (err) {\n    return console.error(err);\n  }\n};\nexport const getTotalClaim = async (lotteryContract, ticketsContract, account) => {\n  try {\n    const issueIdex = await lotteryContract.methods.issueIndex().call();\n    const length = await getTicketsAmount(ticketsContract, account); // eslint-disable-next-line prefer-spread\n\n    const calls1 = Array.apply(null, {\n      length\n    }).map((a, i) => [ticketsContract.options.address, 'tokenOfOwnerByIndex', [account, i]]);\n    const res = await multiCall(ticketAbi, calls1);\n    const tokenIds = res.map(id => id.toString());\n    const calls2 = tokenIds.map(id => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]]);\n    const ticketIssues = await multiCall(ticketAbi, calls2);\n    const calls3 = tokenIds.map(id => [ticketsContract.options.address, 'getClaimStatus', [id]]);\n    const claimedStatus = await multiCall(ticketAbi, calls3);\n    const drawed = await getLotteryStatus(lotteryContract);\n    const finalTokenids = [];\n    ticketIssues.forEach(async (ticketIssue, i) => {\n      // eslint-disable-next-line no-empty\n      if (!drawed && ticketIssue.toString() === issueIdex) {} else if (!claimedStatus[i][0]) {\n        finalTokenids.push(tokenIds[i]);\n      }\n    });\n    const calls4 = finalTokenids.map(id => [lotteryContract.options.address, 'getRewardView', [id]]);\n    const rewards = await multiCall(lotteryAbi, calls4);\n    const claim = rewards.reduce((p, c) => BigNumber.sum(p, c), BigNumber(0));\n    return claim;\n  } catch (err) {\n    console.error(err);\n  }\n\n  return BigNumber(0);\n};\nexport const getTotalRewards = async lotteryContract => {\n  const issueIdex = await lotteryContract.methods.issueIndex().call();\n  return lotteryContract.methods.getTotalRewards(issueIdex).call();\n};\nexport const getMax = async lotteryContract => {\n  return lotteryContract.methods.maxNumber().call();\n};\nexport const getLotteryIssueIndex = async lotteryContract => {\n  const issueIndex = await lotteryContract.methods.issueIndex().call();\n  return issueIndex;\n};\nexport const getLotteryStatus = async lotteryContract => {\n  return lotteryContract.methods.drawed().call();\n};\nexport const getMatchingRewardLength = async (lotteryContract, matchNumber) => {\n  let issueIdex = await lotteryContract.methods.issueIndex().call();\n  const drawed = await lotteryContract.methods.drawed().call();\n\n  if (!drawed) {\n    issueIdex -= 1;\n  }\n\n  try {\n    const amount = await lotteryContract.methods.historyAmount(issueIdex, 5 - matchNumber).call();\n    return amount / 1e18 / 10;\n  } catch (err) {\n    console.error(err);\n  }\n\n  return 0;\n};\nexport const getWinningNumbers = async lotteryContract => {\n  const issueIdex = await lotteryContract.methods.issueIndex().call();\n  const numbers = [];\n  const drawed = await lotteryContract.methods.drawed().call();\n\n  if (!drawed && parseInt(issueIdex, 10) === 0) {\n    return [0, 0, 0, 0];\n  }\n\n  if (!drawed) {\n    for (let i = 0; i < 4; i++) {\n      numbers.push(+(await lotteryContract.methods.historyNumbers(issueIdex - 1, i).call()).toString());\n    }\n  } else {\n    for (let i = 0; i < 4; i++) {\n      numbers.push(+(await lotteryContract.methods.winningNumbers(i).call()).toString());\n    }\n  }\n\n  return numbers;\n};","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/Naughty/naughty_front/src/utils/lotteryUtils.js"],"names":["BigNumber","Interface","getWeb3","MultiCallAbi","ticketAbi","lotteryAbi","getMulticallAddress","multiCall","abi","calls","web3","multi","eth","Contract","itf","res","length","i","newCalls","slice","calldata","map","call","toLowerCase","encodeFunctionData","returnData","methods","aggregate","concat","index","decodeFunctionResult","multiBuy","lotteryContract","price","numbersList","account","times","pow","toString","send","from","on","tx","transactionHash","err","console","error","getTickets","ticketsContract","customLotteryNum","issueIdex","issueIndex","getTicketsAmount","calls1","Array","apply","a","options","address","tokenIds","id","calls2","ticketIssues","finalTokenids","forEach","ticketIssue","push","calls3","tickets","getLotteryStatus","balanceOf","multiClaim","claimedStatus","unClaimedIds","filter","rewards","finanltokenIds","r","getTotalClaim","drawed","calls4","claim","reduce","p","c","sum","getTotalRewards","getMax","maxNumber","getLotteryIssueIndex","getMatchingRewardLength","matchNumber","amount","historyAmount","getWinningNumbers","numbers","parseInt","historyNumbers","winningNumbers"],"mappings":"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","sourcesContent":["/* eslint-disable no-await-in-loop */\r\nimport BigNumber from 'bignumber.js'\r\nimport { Interface } from '@ethersproject/abi'\r\nimport { getWeb3 } from 'utils/web3'\r\nimport MultiCallAbi from 'config/abi/Multicall.json'\r\nimport ticketAbi from 'config/abi/lotteryNft.json'\r\nimport lotteryAbi from 'config/abi/lottery.json'\r\nimport { getMulticallAddress } from './addressHelpers'\r\n\r\nexport const multiCall = async (abi, calls) => {\r\n  const web3 = getWeb3()\r\n  const multi = new web3.eth.Contract(MultiCallAbi, getMulticallAddress())\r\n  const itf = new Interface(abi)\r\n  let res = []\r\n  if (calls.length > 100) {\r\n    let i = 0\r\n    while (i < calls.length / 100) {\r\n      const newCalls = calls.slice(i * 100, 100 * (i + 1))\r\n      const calldata = newCalls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\r\n      const { returnData } = await multi.methods.aggregate(calldata).call()\r\n      i++\r\n      res = res.concat(returnData.map((call, index) => itf.decodeFunctionResult(newCalls[index][1], call)))\r\n    }\r\n  } else {\r\n    const calldata = calls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\r\n    const { returnData } = await multi.methods.aggregate(calldata).call()\r\n    res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i][1], call))\r\n  }\r\n  return res\r\n}\r\n\r\nexport const multiBuy = async (lotteryContract, price, numbersList, account) => {\r\n  try {\r\n    return lotteryContract.methods\r\n      .multiBuy(new BigNumber(price).times(new BigNumber(10).pow(18)).toString(), numbersList)\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  } catch (err) {\r\n    return console.error(err)\r\n  }\r\n}\r\n\r\nexport const getTickets = async (lotteryContract, ticketsContract, account, customLotteryNum) => {\r\n  const issueIdex = customLotteryNum || (await lotteryContract.methods.issueIndex().call())\r\n  const length = await getTicketsAmount(ticketsContract, account)\r\n\r\n  // eslint-disable-next-line prefer-spread\r\n  const calls1 = Array.apply(null, { length }).map((a, i) => [\r\n    ticketsContract.options.address,\r\n    'tokenOfOwnerByIndex',\r\n    [account, i],\r\n  ])\r\n  const res = await multiCall(ticketAbi, calls1)\r\n\r\n  const tokenIds = res.map((id) => id.toString())\r\n\r\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\r\n  const ticketIssues = await multiCall(ticketAbi, calls2)\r\n\r\n  const finalTokenids = []\r\n  ticketIssues.forEach(async (ticketIssue, i) => {\r\n    if (ticketIssue.toString() === issueIdex) {\r\n      finalTokenids.push(tokenIds[i])\r\n    }\r\n  })\r\n  const calls3 = finalTokenids.map((id) => [ticketsContract.options.address, 'getLotteryNumbers', [id]])\r\n  const tickets = await multiCall(ticketAbi, calls3)\r\n\r\n  await getLotteryStatus(lotteryContract)\r\n  return tickets\r\n}\r\n\r\nexport const getTicketsAmount = async (ticketsContract, account) => {\r\n  return ticketsContract.methods.balanceOf(account).call()\r\n}\r\n\r\nexport const multiClaim = async (lotteryContract, ticketsContract, account) => {\r\n  await lotteryContract.methods.issueIndex().call()\r\n  const length = await getTicketsAmount(ticketsContract, account)\r\n  // eslint-disable-next-line prefer-spread\r\n  const calls1 = Array.apply(null, { length }).map((a, i) => [\r\n    ticketsContract.options.address,\r\n    'tokenOfOwnerByIndex',\r\n    [account, i],\r\n  ])\r\n  const res = await multiCall(ticketAbi, calls1)\r\n  const tokenIds = res.map((id) => id.toString())\r\n\r\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\r\n  const claimedStatus = await multiCall(ticketAbi, calls2)\r\n\r\n  const unClaimedIds = tokenIds.filter((id, index) => !claimedStatus[index][0])\r\n\r\n  const calls3 = unClaimedIds.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\r\n  const rewards = await multiCall(lotteryAbi, calls3)\r\n\r\n  let finanltokenIds = []\r\n  rewards.forEach((r, i) => {\r\n    if (r > 0) {\r\n      finanltokenIds.push(unClaimedIds[i])\r\n    }\r\n  })\r\n\r\n  if (finanltokenIds.length > 200) {\r\n    finanltokenIds = finanltokenIds.slice(0, 200)\r\n  }\r\n\r\n  try {\r\n    return lotteryContract.methods\r\n      .multiClaim(finanltokenIds)\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  } catch (err) {\r\n    return console.error(err)\r\n  }\r\n}\r\n\r\nexport const getTotalClaim = async (lotteryContract, ticketsContract, account) => {\r\n  try {\r\n    const issueIdex = await lotteryContract.methods.issueIndex().call()\r\n    const length = await getTicketsAmount(ticketsContract, account)\r\n    // eslint-disable-next-line prefer-spread\r\n    const calls1 = Array.apply(null, { length }).map((a, i) => [\r\n      ticketsContract.options.address,\r\n      'tokenOfOwnerByIndex',\r\n      [account, i],\r\n    ])\r\n    const res = await multiCall(ticketAbi, calls1)\r\n    const tokenIds = res.map((id) => id.toString())\r\n    const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\r\n    const ticketIssues = await multiCall(ticketAbi, calls2)\r\n    const calls3 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\r\n    const claimedStatus = await multiCall(ticketAbi, calls3)\r\n\r\n    const drawed = await getLotteryStatus(lotteryContract)\r\n\r\n    const finalTokenids = []\r\n    ticketIssues.forEach(async (ticketIssue, i) => {\r\n      // eslint-disable-next-line no-empty\r\n      if (!drawed && ticketIssue.toString() === issueIdex) {\r\n      } else if (!claimedStatus[i][0]) {\r\n        finalTokenids.push(tokenIds[i])\r\n      }\r\n    })\r\n\r\n    const calls4 = finalTokenids.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\r\n\r\n    const rewards = await multiCall(lotteryAbi, calls4)\r\n    const claim = rewards.reduce((p, c) => BigNumber.sum(p, c), BigNumber(0))\r\n\r\n    return claim\r\n  } catch (err) {\r\n    console.error(err)\r\n  }\r\n  return BigNumber(0)\r\n}\r\n\r\nexport const getTotalRewards = async (lotteryContract) => {\r\n  const issueIdex = await lotteryContract.methods.issueIndex().call()\r\n  return lotteryContract.methods.getTotalRewards(issueIdex).call()\r\n}\r\n\r\nexport const getMax = async (lotteryContract) => {\r\n  return lotteryContract.methods.maxNumber().call()\r\n}\r\n\r\nexport const getLotteryIssueIndex = async (lotteryContract) => {\r\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\r\n  return issueIndex\r\n}\r\n\r\nexport const getLotteryStatus = async (lotteryContract) => {\r\n  return lotteryContract.methods.drawed().call()\r\n}\r\n\r\nexport const getMatchingRewardLength = async (lotteryContract, matchNumber) => {\r\n  let issueIdex = await lotteryContract.methods.issueIndex().call()\r\n  const drawed = await lotteryContract.methods.drawed().call()\r\n  if (!drawed) {\r\n    issueIdex -= 1\r\n  }\r\n  try {\r\n    const amount = await lotteryContract.methods.historyAmount(issueIdex, 5 - matchNumber).call()\r\n    return amount / 1e18 / 10\r\n  } catch (err) {\r\n    console.error(err)\r\n  }\r\n  return 0\r\n}\r\n\r\nexport const getWinningNumbers = async (lotteryContract) => {\r\n  const issueIdex = await lotteryContract.methods.issueIndex().call()\r\n  const numbers = []\r\n  const drawed = await lotteryContract.methods.drawed().call()\r\n\r\n  if (!drawed && parseInt(issueIdex, 10) === 0) {\r\n    return [0, 0, 0, 0]\r\n  }\r\n  if (!drawed) {\r\n    for (let i = 0; i < 4; i++) {\r\n      numbers.push(+(await lotteryContract.methods.historyNumbers(issueIdex - 1, i).call()).toString())\r\n    }\r\n  } else {\r\n    for (let i = 0; i < 4; i++) {\r\n      numbers.push(+(await lotteryContract.methods.winningNumbers(i).call()).toString())\r\n    }\r\n  }\r\n  return numbers\r\n}\r\n"]},"metadata":{},"sourceType":"module"}