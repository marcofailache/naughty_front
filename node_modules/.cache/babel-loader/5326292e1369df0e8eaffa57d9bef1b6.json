{"ast":null,"code":"var _jsxFileName = \"/Users/ivopascoal/Desktop/Naughty/naughty_front/src/views/Nft/components/NftCard/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { Card, CardBody, Heading, Tag, Button, ChevronUpIcon, ChevronDownIcon, Text, CardFooter, useModal, LinkExternal } from '@pancakeswap-libs/uikit';\nimport useI18n from 'hooks/useI18n';\nimport InfoRow from '../InfoRow';\nimport Image from '../Image';\nimport { NftProviderContext } from '../../contexts/NftProvider';\nimport { getPancakeRabbitContract } from '../../utils/contracts';\nimport ClaimNftModal from '../ClaimNftModal';\nimport BurnNftModal from '../BurnNftModal';\nimport TransferNftModal from '../TransferNftModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledLinkExternal = styled(LinkExternal)`\n  text-decoration: none;\n  font-weight: normal;\n  color: ${({\n  theme\n}) => theme.colors.text};\n  display: flex;\n  align-items: center;\n\n  svg {\n    padding-left: 4px;\n    height: 18px;\n    width: auto;\n    fill: ${({\n  theme\n}) => theme.colors.primary};\n  }\n`;\n_c = StyledLinkExternal;\nconst Header = styled(InfoRow)`\n  min-height: 28px;\n`;\n_c2 = Header;\nconst DetailsButton = styled(Button).attrs({\n  variant: 'text',\n  fullWidth: true\n})`\n  height: auto;\n  padding: 16px 24px;\n\n  &:hover:not(:disabled):not(:active) {\n    background-color: transparent;\n  }\n\n  &:focus:not(:active) {\n    box-shadow: none;\n  }\n`;\n_c3 = DetailsButton;\nconst InfoBlock = styled.div`\n  padding: 0 24px 24px;\n`;\n_c4 = InfoBlock;\nconst Value = styled(Text)`\n  font-weight: 600;\n`;\n\nconst NftCard = ({\n  nft\n}) => {\n  _s();\n\n  const [state, setState] = useState({\n    isLoading: false,\n    isOpen: false,\n    bunnyCount: 0,\n    bunnyBurnCount: 0\n  });\n  const TranslateString = useI18n();\n  const {\n    isInitialized,\n    canClaim,\n    hasClaimed,\n    canBurnNft,\n    totalSupplyDistributed,\n    currentDistributedSupply,\n    getTokenIds,\n    reInitialize\n  } = useContext(NftProviderContext);\n  const walletCanClaim = canClaim && !hasClaimed;\n  const {\n    bunnyId,\n    name,\n    previewImage,\n    originalImage,\n    description\n  } = nft;\n  const tokenIds = getTokenIds(bunnyId);\n  const isSupplyAvailable = currentDistributedSupply < totalSupplyDistributed;\n  const walletOwnsNft = tokenIds && tokenIds.length > 0;\n  const Icon = state.isOpen ? ChevronUpIcon : ChevronDownIcon;\n  const fetchDetails = useCallback(async () => {\n    setState(prevState => ({ ...prevState,\n      isLoading: true\n    }));\n\n    try {\n      const {\n        methods\n      } = getPancakeRabbitContract();\n      const bunnyCount = await methods.bunnyCount(bunnyId).call();\n      const bunnyBurnCount = await methods.bunnyBurnCount(bunnyId).call();\n      setState(prevState => ({ ...prevState,\n        isLoading: false,\n        isDataFetched: true,\n        bunnyCount: parseInt(bunnyCount, 10),\n        bunnyBurnCount: parseInt(bunnyBurnCount, 10)\n      }));\n    } catch (error) {\n      console.error(error);\n    }\n  }, [bunnyId]);\n\n  const handleClick = async () => {\n    if (state.isOpen) {\n      setState(prevState => ({ ...prevState,\n        isOpen: !prevState.isOpen\n      }));\n    } else {\n      try {\n        await fetchDetails();\n      } catch (error) {\n        console.error(error);\n      } finally {\n        setState(prevState => ({ ...prevState,\n          isOpen: !prevState.isOpen\n        }));\n      }\n    }\n  };\n\n  const handleSuccess = () => {\n    fetchDetails();\n    reInitialize();\n  };\n\n  const [onPresentClaimModal] = useModal( /*#__PURE__*/_jsxDEV(ClaimNftModal, {\n    nft: nft,\n    onSuccess: handleSuccess\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 42\n  }, this));\n  const [onPresentBurnModal] = useModal( /*#__PURE__*/_jsxDEV(BurnNftModal, {\n    nft: nft,\n    tokenIds: tokenIds,\n    onSuccess: handleSuccess\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 41\n  }, this));\n  const [onPresentTransferModal] = useModal( /*#__PURE__*/_jsxDEV(TransferNftModal, {\n    nft: nft,\n    tokenIds: tokenIds,\n    onSuccess: handleSuccess\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(Card, {\n    isActive: walletOwnsNft,\n    children: [/*#__PURE__*/_jsxDEV(Image, {\n      src: `/images/nfts/${previewImage}`,\n      alt: name,\n      originalLink: walletOwnsNft ? originalImage : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        children: [/*#__PURE__*/_jsxDEV(Heading, {\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this), isInitialized && walletCanClaim && /*#__PURE__*/_jsxDEV(Tag, {\n          outline: true,\n          variant: \"success\",\n          children: TranslateString(526, 'Available')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this), isInitialized && tokenIds && /*#__PURE__*/_jsxDEV(Tag, {\n          outline: true,\n          variant: \"secondary\",\n          children: TranslateString(999, 'In Wallet')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), isInitialized && walletOwnsNft && /*#__PURE__*/_jsxDEV(Button, {\n        fullWidth: true,\n        variant: \"secondary\",\n        mt: \"24px\",\n        onClick: onPresentTransferModal,\n        children: TranslateString(999, 'Transfer')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }, this), isInitialized && !walletCanClaim && !isSupplyAvailable && /*#__PURE__*/_jsxDEV(Button, {\n        fullWidth: true,\n        onClick: onPresentClaimModal,\n        mt: \"24px\",\n        children: TranslateString(999, 'Claim this NFT')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this), isInitialized && canBurnNft && walletOwnsNft && /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"danger\",\n        fullWidth: true,\n        onClick: onPresentBurnModal,\n        mt: \"24px\",\n        children: TranslateString(999, 'Trade in for CAKE')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardFooter, {\n      p: \"0\",\n      children: [/*#__PURE__*/_jsxDEV(DetailsButton, {\n        endIcon: /*#__PURE__*/_jsxDEV(Icon, {\n          width: \"24px\",\n          color: \"primary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 33\n        }, this),\n        onClick: handleClick,\n        children: state.isLoading ? TranslateString(999, 'Loading...') : TranslateString(999, 'Details')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), state.isOpen && /*#__PURE__*/_jsxDEV(InfoBlock, {\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          as: \"p\",\n          color: \"textSubtle\",\n          mb: \"16px\",\n          style: {\n            textAlign: 'center'\n          },\n          children: description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(InfoRow, {\n          children: /*#__PURE__*/_jsxDEV(StyledLinkExternal, {\n            href: `${nft.originalImage}`,\n            children: \"Link to preview\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NftCard, \"ZN4HFO8TzafoKTr59u1cPTuXnog=\", false, function () {\n  return [useI18n, useModal, useModal, useModal];\n});\n\n_c5 = NftCard;\nexport default NftCard;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"StyledLinkExternal\");\n$RefreshReg$(_c2, \"Header\");\n$RefreshReg$(_c3, \"DetailsButton\");\n$RefreshReg$(_c4, \"InfoBlock\");\n$RefreshReg$(_c5, \"NftCard\");","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/Naughty/naughty_front/src/views/Nft/components/NftCard/index.tsx"],"names":["React","useState","useContext","useCallback","styled","Card","CardBody","Heading","Tag","Button","ChevronUpIcon","ChevronDownIcon","Text","CardFooter","useModal","LinkExternal","useI18n","InfoRow","Image","NftProviderContext","getPancakeRabbitContract","ClaimNftModal","BurnNftModal","TransferNftModal","StyledLinkExternal","theme","colors","text","primary","Header","DetailsButton","attrs","variant","fullWidth","InfoBlock","div","Value","NftCard","nft","state","setState","isLoading","isOpen","bunnyCount","bunnyBurnCount","TranslateString","isInitialized","canClaim","hasClaimed","canBurnNft","totalSupplyDistributed","currentDistributedSupply","getTokenIds","reInitialize","walletCanClaim","bunnyId","name","previewImage","originalImage","description","tokenIds","isSupplyAvailable","walletOwnsNft","length","Icon","fetchDetails","prevState","methods","call","isDataFetched","parseInt","error","console","handleClick","handleSuccess","onPresentClaimModal","onPresentBurnModal","onPresentTransferModal","textAlign"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Heading,\r\n  Tag,\r\n  Button,\r\n  ChevronUpIcon,\r\n  ChevronDownIcon,\r\n  Text,\r\n  CardFooter,\r\n  useModal,\r\n   Link, LinkExternal\r\n} from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { Nft } from 'config/constants/types'\r\nimport InfoRow from '../InfoRow'\r\nimport Image from '../Image'\r\nimport { NftProviderContext } from '../../contexts/NftProvider'\r\nimport { getPancakeRabbitContract } from '../../utils/contracts'\r\nimport ClaimNftModal from '../ClaimNftModal'\r\nimport BurnNftModal from '../BurnNftModal'\r\nimport TransferNftModal from '../TransferNftModal'\r\n\r\ninterface NftCardProps {\r\n  nft: Nft\r\n}\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  text-decoration: none;\r\n  font-weight: normal;\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  svg {\r\n    padding-left: 4px;\r\n    height: 18px;\r\n    width: auto;\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst Header = styled(InfoRow)`\r\n  min-height: 28px;\r\n`\r\n\r\nconst DetailsButton = styled(Button).attrs({ variant: 'text', fullWidth: true })`\r\n  height: auto;\r\n  padding: 16px 24px;\r\n\r\n  &:hover:not(:disabled):not(:active) {\r\n    background-color: transparent;\r\n  }\r\n\r\n  &:focus:not(:active) {\r\n    box-shadow: none;\r\n  }\r\n`\r\n\r\nconst InfoBlock = styled.div`\r\n  padding: 0 24px 24px;\r\n`\r\n\r\nconst Value = styled(Text)`\r\n  font-weight: 600;\r\n`\r\n\r\nconst NftCard: React.FC<NftCardProps> = ({ nft }) => {\r\n  const [state, setState] = useState({\r\n    isLoading: false,\r\n    isOpen: false,\r\n    bunnyCount: 0,\r\n    bunnyBurnCount: 0,\r\n  })\r\n  const TranslateString = useI18n()\r\n  const {\r\n    isInitialized,\r\n    canClaim,\r\n    hasClaimed,\r\n    canBurnNft,\r\n    totalSupplyDistributed,\r\n    currentDistributedSupply,\r\n    getTokenIds,\r\n    reInitialize,\r\n  } = useContext(NftProviderContext)\r\n  const walletCanClaim = canClaim && !hasClaimed\r\n  const { bunnyId, name, previewImage, originalImage, description } = nft\r\n  const tokenIds = getTokenIds(bunnyId)\r\n  const isSupplyAvailable = currentDistributedSupply < totalSupplyDistributed\r\n  const walletOwnsNft = tokenIds && tokenIds.length > 0\r\n  const Icon = state.isOpen ? ChevronUpIcon : ChevronDownIcon\r\n\r\n  const fetchDetails = useCallback(async () => {\r\n    setState((prevState) => ({ ...prevState, isLoading: true }))\r\n    try {\r\n      const { methods } = getPancakeRabbitContract()\r\n      const bunnyCount = await methods.bunnyCount(bunnyId).call()\r\n      const bunnyBurnCount = await methods.bunnyBurnCount(bunnyId).call()\r\n\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        isLoading: false,\r\n        isDataFetched: true,\r\n        bunnyCount: parseInt(bunnyCount, 10),\r\n        bunnyBurnCount: parseInt(bunnyBurnCount, 10),\r\n      }))\r\n    } catch (error) {\r\n      console.error(error)\r\n    }\r\n  }, [bunnyId])\r\n\r\n  const handleClick = async () => {\r\n    if (state.isOpen) {\r\n      setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\r\n    } else {\r\n      try {\r\n        await fetchDetails()\r\n      } catch (error) {\r\n        console.error(error)\r\n      } finally {\r\n        setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleSuccess = () => {\r\n    fetchDetails()\r\n    reInitialize()\r\n  }\r\n\r\n  const [onPresentClaimModal] = useModal(<ClaimNftModal nft={nft} onSuccess={handleSuccess} />)\r\n  const [onPresentBurnModal] = useModal(<BurnNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />)\r\n  const [onPresentTransferModal] = useModal(\r\n    <TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />,\r\n  )\r\n\r\n  return (\r\n    <Card isActive={walletOwnsNft}>\r\n      <Image src={`/images/nfts/${previewImage}`} alt={name} originalLink={walletOwnsNft ? originalImage : null} />\r\n      <CardBody>\r\n        <Header>\r\n          <Heading>{name}</Heading>\r\n          {isInitialized && walletCanClaim && (\r\n            <Tag outline variant=\"success\">\r\n              {TranslateString(526, 'Available')}\r\n            </Tag>\r\n          )}\r\n          {isInitialized && tokenIds && (\r\n            <Tag outline variant=\"secondary\">\r\n              {TranslateString(999, 'In Wallet')}\r\n            </Tag>\r\n          )}\r\n        </Header>\r\n        {isInitialized && walletOwnsNft && (\r\n          <Button fullWidth variant=\"secondary\" mt=\"24px\" onClick={onPresentTransferModal}>\r\n            {TranslateString(999, 'Transfer')}\r\n          </Button>\r\n        )}\r\n        {isInitialized && !walletCanClaim && !isSupplyAvailable && (\r\n          <Button fullWidth onClick={onPresentClaimModal} mt=\"24px\">\r\n            {TranslateString(999, 'Claim this NFT')}\r\n          </Button>\r\n        )}\r\n        {isInitialized && canBurnNft && walletOwnsNft && (\r\n          <Button variant=\"danger\" fullWidth onClick={onPresentBurnModal} mt=\"24px\">\r\n            {TranslateString(999, 'Trade in for CAKE')}\r\n          </Button>\r\n        )}\r\n      </CardBody>\r\n      <CardFooter p=\"0\">\r\n        <DetailsButton endIcon={<Icon width=\"24px\" color=\"primary\" />} onClick={handleClick}>\r\n          {state.isLoading ? TranslateString(999, 'Loading...') : TranslateString(999, 'Details')}\r\n        </DetailsButton>\r\n        {state.isOpen && (\r\n          <InfoBlock>\r\n            <Text as=\"p\" color=\"textSubtle\" mb=\"16px\" style={{ textAlign: 'center' }}>\r\n              {description}\r\n            </Text>\r\n            \r\n            \r\n            <InfoRow>\r\n             \r\n              <StyledLinkExternal href= {`${nft.originalImage}`}\r\n         \r\n            >\r\n          Link to preview\r\n        </StyledLinkExternal>\r\n            </InfoRow>\r\n          </InfoBlock>\r\n        )}\r\n      </CardFooter>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default NftCard\r\n"]},"metadata":{},"sourceType":"module"}