{"ast":null,"code":"import getTimePeriods from 'utils/getTimePeriods'; // lottery draws UTC: 02:00 (10:00 SGT), 14:00 (22:00 SGT)\n\nconst lotteryDrawHoursUtc = [20];\n\nconst getClosestLotteryHour = currentHour => {\n  switch (true) {\n    case currentHour < lotteryDrawHoursUtc[0] || currentHour >= lotteryDrawHoursUtc[1]:\n      return lotteryDrawHoursUtc[0];\n\n    case currentHour < lotteryDrawHoursUtc[1]:\n      return lotteryDrawHoursUtc[1];\n\n    default:\n      return 0;\n  }\n};\n\nconst getNextLotteryDrawTime = currentMillis => {\n  const date = new Date(currentMillis);\n  const currentHour = date.getUTCHours();\n  const nextLotteryHour = getClosestLotteryHour(currentHour); // next lottery is tomorrow if the next lottery is at 2am UTC...\n  // ...and current time is between 02:00am & 23:59pm UTC\n\n  const nextLotteryIsTomorrow = nextLotteryHour === 20 && currentHour >= 20 && currentHour <= 23;\n  let millisTimeOfNextDraw;\n\n  if (nextLotteryIsTomorrow) {\n    const tomorrow = new Date(currentMillis);\n    const nextDay = tomorrow.getUTCDate() + 1;\n    tomorrow.setUTCDate(nextDay);\n    millisTimeOfNextDraw = tomorrow.setUTCHours(nextLotteryHour, 0, 0, 0);\n  } else {\n    millisTimeOfNextDraw = date.setUTCHours(nextLotteryHour, 0, 0, 0);\n  }\n\n  return millisTimeOfNextDraw;\n}; // @ts-ignore\n\n\nconst getNextTicketSaleTime = currentMillis => (parseInt(currentMillis / 3600000) + 1) * 3600000;\n\nconst hoursAndMinutesString = (hours, minutes) => `${parseInt(hours)}h, ${parseInt(minutes)}m`;\n\nexport const getTicketSaleTime = currentMillis => {\n  const nextTicketSaleTime = getNextTicketSaleTime(currentMillis);\n  const msUntilNextTicketSale = nextTicketSaleTime - currentMillis;\n  const {\n    minutes\n  } = getTimePeriods(msUntilNextTicketSale / 1000);\n  const {\n    hours\n  } = getTimePeriods(msUntilNextTicketSale / 1000);\n  return hoursAndMinutesString(hours, minutes);\n};\nexport const getLotteryDrawTime = currentMillis => {\n  const nextLotteryDrawTime = getNextLotteryDrawTime(currentMillis);\n  const msUntilLotteryDraw = nextLotteryDrawTime - currentMillis;\n  const {\n    minutes\n  } = getTimePeriods(msUntilLotteryDraw / 1000);\n  const {\n    hours\n  } = getTimePeriods(msUntilLotteryDraw / 1000);\n  return hoursAndMinutesString(hours, minutes);\n};\nexport const getTicketSaleStep = () => 1 / 12 * 100;\nexport const getLotteryDrawStep = currentMillis => {\n  const msBetweenLotteries = 43200000;\n  const endTime = getNextLotteryDrawTime(currentMillis);\n  const msUntilLotteryDraw = endTime - currentMillis;\n  const percentageRemaining = msUntilLotteryDraw / msBetweenLotteries * 100;\n  return 100 - percentageRemaining;\n};","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/Naughty/naughty_front/src/views/Lottery/helpers/CountdownHelpers.ts"],"names":["getTimePeriods","lotteryDrawHoursUtc","getClosestLotteryHour","currentHour","getNextLotteryDrawTime","currentMillis","date","Date","getUTCHours","nextLotteryHour","nextLotteryIsTomorrow","millisTimeOfNextDraw","tomorrow","nextDay","getUTCDate","setUTCDate","setUTCHours","getNextTicketSaleTime","parseInt","hoursAndMinutesString","hours","minutes","getTicketSaleTime","nextTicketSaleTime","msUntilNextTicketSale","getLotteryDrawTime","nextLotteryDrawTime","msUntilLotteryDraw","getTicketSaleStep","getLotteryDrawStep","msBetweenLotteries","endTime","percentageRemaining"],"mappings":"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","sourcesContent":["import getTimePeriods from 'utils/getTimePeriods'\r\n\r\n// lottery draws UTC: 02:00 (10:00 SGT), 14:00 (22:00 SGT)\r\nconst lotteryDrawHoursUtc = [20]\r\n\r\nconst getClosestLotteryHour = (currentHour) => {\r\n  switch (true) {\r\n    case currentHour < lotteryDrawHoursUtc[0] || currentHour >= lotteryDrawHoursUtc[1]:\r\n      return lotteryDrawHoursUtc[0]\r\n    case currentHour < lotteryDrawHoursUtc[1]:\r\n      return lotteryDrawHoursUtc[1]\r\n    default:\r\n      return 0\r\n  }\r\n}\r\n\r\nconst getNextLotteryDrawTime = (currentMillis) => {\r\n  const date = new Date(currentMillis)\r\n  const currentHour = date.getUTCHours()\r\n  const nextLotteryHour = getClosestLotteryHour(currentHour)\r\n  // next lottery is tomorrow if the next lottery is at 2am UTC...\r\n  // ...and current time is between 02:00am & 23:59pm UTC\r\n  const nextLotteryIsTomorrow = nextLotteryHour === 20 && currentHour >= 20 && currentHour <= 23\r\n  let millisTimeOfNextDraw\r\n\r\n  if (nextLotteryIsTomorrow) {\r\n    const tomorrow = new Date(currentMillis)\r\n    const nextDay = tomorrow.getUTCDate() + 1\r\n    tomorrow.setUTCDate(nextDay)\r\n    millisTimeOfNextDraw = tomorrow.setUTCHours(nextLotteryHour, 0, 0, 0)\r\n  } else {\r\n    millisTimeOfNextDraw = date.setUTCHours(nextLotteryHour, 0, 0, 0)\r\n  }\r\n\r\n  return millisTimeOfNextDraw\r\n}\r\n\r\n// @ts-ignore\r\nconst getNextTicketSaleTime = (currentMillis) => (parseInt(currentMillis / 3600000) + 1) * 3600000\r\nconst hoursAndMinutesString = (hours, minutes) => `${parseInt(hours)}h, ${parseInt(minutes)}m`\r\n\r\nexport const getTicketSaleTime = (currentMillis): string => {\r\n  const nextTicketSaleTime = getNextTicketSaleTime(currentMillis)\r\n  const msUntilNextTicketSale = nextTicketSaleTime - currentMillis\r\n  const { minutes } = getTimePeriods(msUntilNextTicketSale / 1000)\r\n  const { hours } = getTimePeriods(msUntilNextTicketSale / 1000)\r\n  return hoursAndMinutesString(hours, minutes)\r\n}\r\n\r\nexport const getLotteryDrawTime = (currentMillis): string => {\r\n  const nextLotteryDrawTime = getNextLotteryDrawTime(currentMillis)\r\n  const msUntilLotteryDraw = nextLotteryDrawTime - currentMillis\r\n  const { minutes } = getTimePeriods(msUntilLotteryDraw / 1000)\r\n  const { hours } = getTimePeriods(msUntilLotteryDraw / 1000)\r\n  return hoursAndMinutesString(hours, minutes)\r\n}\r\n\r\nexport const getTicketSaleStep = () => (1 / 12) * 100\r\n\r\nexport const getLotteryDrawStep = (currentMillis) => {\r\n  const msBetweenLotteries = 43200000\r\n  const endTime = getNextLotteryDrawTime(currentMillis)\r\n  const msUntilLotteryDraw = endTime - currentMillis\r\n  const percentageRemaining = (msUntilLotteryDraw / msBetweenLotteries) * 100\r\n  return 100 - percentageRemaining\r\n}\r\n"]},"metadata":{},"sourceType":"module"}