{"version":3,"sources":["utils/callHelpers.ts","hooks/useHarvest.ts","hooks/useTokenBalance.ts","hooks/useFarmsWithBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","views/Home/components/NaughtyWalletBalance.tsx","hooks/useAllEarnings.ts","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","hooks/useNaughtyBalance.ts","views/Home/components/CakeStats2.tsx","views/Home/components/TwitterCard.tsx","views/Home/Home.tsx"],"names":["approve","lpContract","masterChefContract","account","a","methods","options","address","ethers","constants","MaxUint256","send","from","stake","pid","amount","deposit","BigNumber","times","pow","toString","on","tx","transactionHash","sousStake","sousChefContract","sousStakeBnb","value","unstake","withdraw","sousUnstake","emergencyWithdraw","sousEmegencyUnstake","harvest","soushHarvest","soushHarvestBnb","useHarvest","farmPid","dispatch","useDispatch","useWallet","useMasterchef","onReward","useCallback","txHash","fetchFarmUserDataAsync","useAllHarvest","farmPids","harvestPromises","reduce","accum","Promise","all","useTotalSupply","slowRefresh","useRefresh","useState","totalSupply","setTotalSupply","useEffect","cakeContract","getContract","cakeABI","getCakeAddress","call","supply","fetchTotalSupply","useBurnedBalance","tokenAddress","balance","setBalance","balanceOf","bal","fetchBalance","useTokenBalance","ethereum","fastRefresh","getTokenBalance","res","useFarmsWithBalance","farmsWithBalances","setFarmsWithBalances","calls","farmsConfig","map","farm","getMasterChefAddress","name","params","multicall","masterChefABI","rawResults","results","index","fetchBalances","CardValue","decimals","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","CakeHarvestBalance","earningsSum","TranslateString","useI18n","color","style","lineHeight","CakeWalletBalance","cakeBalance","NaughtyWalletBalance","naughtyBalance","useAllEarnings","balances","fetchAllBalances","StyledFarmStakingCard","styled","Card","Row","div","Block","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","getBalanceNumber","getNGHTYAddress","eggPrice","usePriceCakeBusd","toNumber","earning","balancesWithValue","filter","balanceType","farmWithBalance","harvestAllFarms","size","mb","src","alt","width","height","toFixed","id","disabled","length","onClick","fullWidth","UnlockButton","StyledCakeStats","CakeStats","burnedBalance","useFarms","usePriceCakeBNB","circSupply","minus","cakeSupply","marketCap","CakeStats2","farms","pastaPerBlock","StyledTwitterCard","TwitterCard","dataSource","sourceType","screenName","chrome","Hero","mediaQueries","lg","Cards","BaseLayout","sm","Home","Page","as","FarmStakingCard"],"mappings":"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","file":"static/js/14.74afd1a8.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport { ethers } from 'ethers'\r\n\r\nexport const approve = async (lpContract, masterChefContract, account) => {\r\n  return lpContract.methods\r\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\r\n    .send({ from: account })\r\n}\r\n\r\nexport const stake = async (masterChefContract, pid, amount, account) => {\r\n  return masterChefContract.methods\r\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousStake = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({ from: account, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const unstake = async (masterChefContract, pid, amount, account) => {\r\n  return masterChefContract.methods\r\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousUnstake = async (sousChefContract, amount, account) => {\r\n  // shit code: hard fix for old CTK and BLK\r\n  if (sousChefContract.options.address === '0x383283D40aEECa9fAE817B7C0E8F2d5277777828') {\r\n    return sousChefContract.methods\r\n      .emergencyWithdraw()\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n  if (sousChefContract.options.address === '0x383283D40aEECa9fAE817B7C0E8F2d5277777828') {\r\n    return sousChefContract.methods\r\n      .emergencyWithdraw()\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n  return sousChefContract.methods\r\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .emergencyWithdraw()\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const harvest = async (masterChefContract, pid, account) => {\r\n  return masterChefContract.methods\r\n    .deposit(pid, '0')\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const soushHarvest = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit('0')\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const soushHarvestBnb = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({ from: account, value: new BigNumber(0) })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\r\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nexport const useHarvest = (farmPid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const txHash = await harvest(masterChefContract, farmPid, account)\r\n    dispatch(fetchFarmUserDataAsync(account))\r\n    return txHash\r\n  }, [account, dispatch, farmPid, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useAllHarvest = (farmPids: number[]) => {\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const harvestPromises = farmPids.reduce((accum, pid) => {\r\n      return [...accum, harvest(masterChefContract, pid, account)]\r\n    }, [])\r\n\r\n    return Promise.all(harvestPromises)\r\n  }, [account, farmPids, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    if (sousId === 0) {\r\n      await harvest(masterChefContract, 0, account)\r\n    } else if (isUsingBnb) {\r\n      await soushHarvestBnb(sousChefContract, account)\r\n    } else {\r\n      await soushHarvest(sousChefContract, account)\r\n    }\r\n    dispatch(updateUserPendingReward(sousId, account))\r\n    dispatch(updateUserBalance(sousId, account))\r\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport cakeABI from 'config/abi/cake.json'\r\nimport { getContract } from 'utils/web3'\r\nimport { getTokenBalance } from 'utils/erc20'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    if (account && ethereum) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, ethereum, tokenAddress, fastRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\r\n      setBalance(new BigNumber(bal))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport default useTokenBalance\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport { FarmConfig } from 'config/constants/types'\r\nimport useRefresh from './useRefresh'\r\n\r\nexport interface FarmWithBalance extends FarmConfig {\r\n  balance: BigNumber\r\n}\r\n\r\nconst useFarmsWithBalance = () => {\r\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\r\n  const { account } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingPASTA',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const rawResults = await multicall(masterChefABI, calls)\r\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\r\n\r\n      setFarmsWithBalances(results)\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return farmsWithBalances\r\n}\r\n\r\nexport default useFarmsWithBalance\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\n\r\ninterface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  prefix?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold fontSize={fontSize}>\r\n      {prefix}{countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport BigNumber from 'bignumber.js'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useAllEarnings from 'hooks/useAllEarnings'\r\nimport CardValue from './CardValue'\r\n\r\nconst CakeHarvestBalance = ({earningsSum}) => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return <CardValue value={earningsSum}fontSize=\"24px\"  />\r\n}\r\n\r\nexport default CakeHarvestBalance\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport CardValue from './CardValue'\r\n\r\nconst CakeWalletBalance = ({cakeBalance}) => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\r\n}\r\n\r\nexport default CakeWalletBalance\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useNaughtyBalance from 'hooks/useNaughtyBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getNGHTYAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport CardValue from './CardValue'\r\n\r\nconst NaughtyWalletBalance = ({naughtyBalance}) => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return <CardValue value={naughtyBalance}  />\r\n}\r\n\r\nexport default NaughtyWalletBalance\r\n","import { useEffect, useState } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useAllEarnings = () => {\r\n  const [balances, setBalance] = useState([])\r\n  const { account }: { account: string } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchAllBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingPASTA',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const res = await multicall(masterChefABI, calls)\r\n\r\n      setBalance(res)\r\n    }\r\n\r\n    if (account) {\r\n      fetchAllBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return balances\r\n}\r\n\r\nexport default useAllEarnings\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useI18n from 'hooks/useI18n'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport { useAllHarvest } from 'hooks/useHarvest'\r\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport CakeHarvestBalance from './CakeHarvestBalance'\r\nimport CakeWalletBalance from './CakeWalletBalance'\r\nimport NaughtyWalletBalance from './NaughtyWalletBalance'\r\nimport useAllEarnings from '../../../hooks/useAllEarnings'\r\nimport { usePriceCakeBusd } from '../../../state/hooks'\r\nimport { getCakeAddress,getNGHTYAddress } from '../../../utils/addressHelpers'\r\nimport useTokenBalance from '../../../hooks/useTokenBalance'\r\nimport { getBalanceNumber } from '../../../utils/formatBalance'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  background-image: url('/images/egg/2a.gif');\r\n  background-repeat: no-repeat;\r\n  background-position: top right;\r\n  min-height: 376px;\r\n`\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 18px;\r\n  justify-content: space-around;\r\n  margin-bottom: 8px;\r\n`\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 10px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account } = useWallet()\r\n  const TranslateString = useI18n()\r\n  const farmsWithBalance = useFarmsWithBalance()\r\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\r\n  const naughtyBalance = getBalanceNumber(useTokenBalance(getNGHTYAddress()))\r\n  const eggPrice = usePriceCakeBusd().toNumber()\r\n  const allEarnings = useAllEarnings()\r\n  const earningsSum = allEarnings.reduce((accum, earning) => {\r\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\r\n  }, 0)\r\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\r\n\r\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\r\n\r\n  const harvestAllFarms = useCallback(async () => {\r\n    setPendingTx(true)\r\n    try {\r\n      await onReward()\r\n    } catch (error) {\r\n      // TODO: find a way to handle when the user rejects transaction or it fails\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n  }, [onReward])\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(542, 'Farms & Staking')}\r\n        </Heading>\r\n        <CardImage src=\"/images/egg/2.png\" alt=\"cake logo\" width={64} height={64} />\r\n        <Block>\r\n        <Label> Naughty in Wallet</Label>\r\n         <NaughtyWalletBalance naughtyBalance={naughtyBalance} />\r\n         <Label>~${(eggPrice * naughtyBalance).toFixed(2)}</Label>\r\n         </Block>\r\n         <Block>\r\n         <Row>\r\n          <Label> Flix in Wallet</Label>\r\n          <Label> Flix to Harvest</Label>\r\n          </Row>\r\n          <Row>\r\n          <CakeWalletBalance cakeBalance={cakeBalance} />\r\n          <CakeHarvestBalance earningsSum={earningsSum}/>\r\n          </Row>\r\n          <Row>\r\n          <Label>~${(eggPrice * cakeBalance).toFixed(2)}</Label>\r\n          <Label>~${(eggPrice * earningsSum).toFixed(2)}</Label>\r\n         </Row>\r\n        </Block>\r\n        <Actions>\r\n          {account ? (\r\n            <Button\r\n              id=\"harvest-all\"\r\n              disabled={balancesWithValue.length <= 0 || pendingTx}\r\n              onClick={harvestAllFarms}\r\n              fullWidth\r\n            >\r\n              {pendingTx\r\n                ? TranslateString(548, 'Collecting EGG')\r\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\r\n            </Button>\r\n          ) : (\r\n            <UnlockButton fullWidth />\r\n          )}\r\n        </Actions>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useNaughtyBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getNGHTYAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\nimport { useFarms, usePriceCakeBNB } from '../../../state/hooks'\r\n\r\nconst StyledCakeStats = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst CakeStats = () => {\r\n  const TranslateString = useI18n()\r\n  const totalSupply = useTotalSupply()\r\n  const burnedBalance = useBurnedBalance(getNGHTYAddress())\r\n  const farms = useFarms();\r\n  const eggPrice = usePriceCakeBNB();\r\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0);\r\n  const cakeSupply = getBalanceNumber(circSupply);\r\n  const marketCap = eggPrice.times(circSupply);\r\n\r\n  \r\n  \r\n\r\n  return (\r\n    <StyledCakeStats>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          Naughty Stats\r\n        </Heading>\r\n        <Row>\r\n          <Text fontSize=\"14px\">Total Naughty Supply</Text>\r\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(999, 'Market Cap')}</Text>\r\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"BnB\" />\r\n\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\"> Total Naughty Burned</Text>\r\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\"> New Naughty/block</Text>\r\n          <Text bold fontSize=\"14px\"> 0</Text>\r\n        </Row>\r\n      </CardBody>\r\n    </StyledCakeStats>\r\n  )\r\n}\r\n\r\nexport default CakeStats\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport cakeABI from 'config/abi/cake.json'\r\nimport { getContract } from 'utils/web3'\r\nimport { getTokenBalance } from 'utils/erc20'\r\nimport { getNGHTYAddress } from 'utils/addressHelpers'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    if (account && ethereum) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, ethereum, tokenAddress, fastRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getContract(cakeABI, getNGHTYAddress())\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const cakeContract = getContract(cakeABI, getNGHTYAddress())\r\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\r\n      setBalance(new BigNumber(bal))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport default useTokenBalance\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\nimport { useFarms, usePriceCakeBusd } from '../../../state/hooks'\r\n\r\nconst StyledCakeStats = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst CakeStats2 = () => {\r\n  const TranslateString = useI18n()\r\n  const totalSupply = useTotalSupply()\r\n  const burnedBalance = useBurnedBalance(getCakeAddress())\r\n  const farms = useFarms();\r\n  const eggPrice = usePriceCakeBusd();\r\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0);\r\n  const cakeSupply = getBalanceNumber(circSupply);\r\n  const marketCap = eggPrice.times(circSupply);\r\n\r\n  let pastaPerBlock = 0;\r\n  if(farms && farms[0] && farms[0].pastaPerBlock){\r\n    pastaPerBlock = new BigNumber(farms[0].pastaPerBlock).div(new BigNumber(10).pow(18)).toNumber();\r\n  }\r\n\r\n  return (\r\n    <StyledCakeStats>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          Flix Stats\r\n        </Heading>\r\n        <Row>\r\n          <Text fontSize=\"14px\">Total FLIX Supply</Text>\r\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(999, 'Market Cap')}</Text>\r\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\r\n\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\"> Total Flix Burned</Text>\r\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\"> New FLIX/block</Text>\r\n          <Text bold fontSize=\"14px\">{pastaPerBlock}</Text>\r\n        </Row>\r\n      </CardBody>\r\n    </StyledCakeStats>\r\n  )\r\n}\r\n\r\nexport default CakeStats2\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport styled from 'styled-components'\r\nimport { Timeline } from 'react-twitter-widgets'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\nimport { useFarms } from '../../../state/hooks'\r\n\r\nconst StyledTwitterCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst TwitterCard = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <StyledTwitterCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          Juicy News\r\n        </Heading>\r\n        <Timeline\r\n          dataSource={{\r\n            sourceType: 'profile',\r\n            screenName: 'Naughtyflixclub'\r\n          }}\r\n          options={{\r\n            height: '300',\r\n            chrome: \"noheader, nofooter\",\r\n            width: \"400\"\r\n          }}\r\n        />\r\n      </CardBody>\r\n    </StyledTwitterCard>\r\n  )\r\n}\r\n\r\nexport default TwitterCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Page from 'components/layout/Page'\r\nimport FarmStakingCard from './components/FarmStakingCard'\r\nimport LotteryCard from './components/LotteryCard'\r\nimport CakeStats from './components/CakeStats'\r\nimport CakeStats2 from './components/CakeStats2'\r\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\r\nimport TwitterCard from './components/TwitterCard'\r\n\r\n\r\nconst Hero = styled.div`\r\n  align-items: center;\r\n  background-image: url('/images/egg/3.png');\r\n  background-repeat: no-repeat;\r\n  background-position: top center;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  margin: auto;\r\n  margin-bottom: 32px;\r\n  padding-top: 116px;\r\n  text-align: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    background-image: url('/images/egg/3.png'), url('/images/egg/3b.gif');\r\n    background-position: left center, right center;\r\n    height: 165px;\r\n    padding-top: 0;\r\n  }\r\n`\r\n\r\nconst Cards = styled(BaseLayout)`\r\n  align-items: stretch;\r\n  justify-content: stretch;\r\n  margin-bottom: 48px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n    width: 100%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 6;\r\n    }\r\n  }\r\n`\r\n\r\nconst Home: React.FC = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Page>\r\n      <Hero>\r\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\r\n          Naughty Finance\r\n        </Heading>\r\n        <Text>The only token that rewards holders with </Text>\r\n        <Text> exclusive video content.</Text>\r\n      </Hero>\r\n      <div>\r\n        <Cards>\r\n          <FarmStakingCard />\r\n          <TwitterCard/>\r\n          <CakeStats />\r\n          <CakeStats2 />\r\n        </Cards>\r\n      </div>\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Home\r\n"],"sourceRoot":""}