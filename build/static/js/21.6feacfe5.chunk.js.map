{"version":3,"sources":["components/layout/Flex.tsx","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/Divider.tsx","views/Farms/Farms.tsx"],"names":["FlexLayout","styled","div","Wrapper","StyledLinkExternal","LinkExternal","theme","colors","text","primary","DetailsSection","isTokenOnly","bscScanAddress","removed","totalValueFormated","lpLabel","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","TranslateString","useI18n","liquidityUrlPathParts","getLiquidityUrlPathParts","justifyContent","href","process","external","bold","Flex","MultiplierTag","Tag","CardHeading","multiplier","farmImage","risk","tokenSymbol","depositFee","alignItems","mb","src","alt","width","height","flexDirection","variant","DepositModal","max","onConfirm","onDismiss","tokenName","depositFeeBP","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","useCallback","e","currentTarget","value","handleSelectMax","title","TokenInput","onSelectMax","onChange","symbol","ModalActions","onClick","disabled","a","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","pid","onStake","useStake","onUnstake","useUnstake","rawStakedBalance","getBalanceNumber","displayBalance","toLocaleString","useModal","onPresentDeposit","onPresentWithdraw","color","mr","BalanceAndCompound","HarvestAction","earnings","onReward","useHarvest","rawEarningsBalance","size","marginBottom","toString","Action","CardActions","farm","ethereum","account","requestedApproval","setRequestedApproval","useFarmFromPid","lpAddresses","useFarmUser","allowance","lpAddress","tokenAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","lpContract","getContract","onApprove","useApprove","handleApprove","console","error","textTransform","fontSize","pr","mt","fullWidth","UnlockButton","Grid","GridItem","Description","Text","ApyCalculatorModal","cakePrice","apy","farmApy","times","BigNumber","toNumber","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","calculateCakeEarnedPerThousandDollars","numberOfDays","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","apyModalRoi","amountEarned","amountInvested","ApyButton","onPresentApyModal","ml","RainbowLight","keyframes","StyledCardAccent","FCard","props","card","background","Divider","borderColor","ExpandingWrapper","expanded","FarmCard","bnbPrice","showExpandableSection","setShowExpandableSection","split","toLowerCase","totalValue","lpTotalInQuoteToken","QuoteToken","BNB","CAKE","Number","undefined","maximumFractionDigits","farmAPY","minimumFractionDigits","style","display","CardActionsContainer","ExpandableSectionButton","FarmTabButtons","stakedOnly","setStakedOnly","useRouteMatch","url","isExact","index","setIndex","ToggleWrapper","checked","activeIndex","newIndex","as","Link","to","textSubtle","Farms","farmsProps","path","farmsLP","useFarms","usePriceCakeBusd","usePriceBnbBusd","useWallet","log","tokenMode","dispatch","useDispatch","fastRefresh","useRefresh","useEffect","fetchFarmUserDataAsync","activeFarms","filter","stakedOnlyFarms","userData","pastaOnlyFarms","startsWith","busdOnlyFarms","includes","bnbOnlyFarms","stakedBusdOnlyFarms","stakedBnbOnlyFarms","stakedPastaOnlyFarms","farmsList","farmsToDisplay","map","cakeRewardPerYear","pastaPerBlock","poolWeight","pow","BLOCKS_PER_YEAR","cakeRewardPerMonth","NGTHY","comparedTo","Page","textAlign","exact","responsive"],"mappings":"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","file":"static/js/21.6feacfe5.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nconst FlexLayout = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  & > * {\r\n    min-width: 280px;\r\n    max-width: 31.5%;\r\n    width: 100%;\r\n    margin: 0 8px;\r\n    margin-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport default FlexLayout\r\n","import React from 'react'\r\nimport useI18n from 'hooks/useI18n'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, Link, LinkExternal } from '@pancakeswap-libs/uikit'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { Address } from 'config/constants/types'\r\n\r\nexport interface ExpandableSectionProps {\r\n  isTokenOnly?: boolean\r\n  bscScanAddress?: string\r\n  removed?: boolean\r\n  totalValueFormated?: string\r\n  lpLabel?: string\r\n  quoteTokenAdresses?: Address\r\n  quoteTokenSymbol?: string\r\n  tokenAddresses: Address\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  text-decoration: none;\r\n  font-weight: normal;\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  svg {\r\n    padding-left: 4px;\r\n    height: 18px;\r\n    width: auto;\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  isTokenOnly,\r\n  bscScanAddress,\r\n  removed,\r\n  totalValueFormated,\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(316, 'Stake')}:</Text>\r\n        <StyledLinkExternal href={\r\n          isTokenOnly ?\r\n            `https://exchange.pancakeswap.com/#/swap/${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n            :\r\n            `https://exchange.pancakeswap.com/#/add/${liquidityUrlPathParts}`\r\n        }>\r\n          {lpLabel}\r\n        </StyledLinkExternal>\r\n      </Flex>\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\r\n          <Text>{totalValueFormated}</Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"flex-start\">\r\n        <Link external href={bscScanAddress} bold={false}>\r\n          {TranslateString(356, 'View on BscScan')}\r\n        </Link>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\r\nimport { CommunityTag, CoreTag, RiskTag, NoFeeTag } from 'components/Tags'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  risk?: number\r\n  depositFee?: number\r\n  farmImage?: string\r\n  tokenSymbol?: string\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 0.25rem;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\r\n  lpLabel,\r\n  multiplier,\r\n  risk,\r\n  farmImage,\r\n  tokenSymbol,\r\n  depositFee,\r\n}) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} />\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel}</Heading>\r\n        <Flex justifyContent=\"center\">\r\n          {depositFee === 0 ? <NoFeeTag /> : null}\r\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\r\n          {/* <RiskTag risk={risk} /> */}\r\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\r\n        </Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport TokenInput from 'components/TokenInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  depositFeeBP?: number\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '' , depositFeeBP = 0}) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\r\n      <TokenInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        depositFeeBP={depositFeeBP}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport TokenInput from 'components/TokenInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\r\n      <TokenInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  depositFeeBP?: number\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ stakedBalance, tokenBalance, tokenName, pid, depositFeeBP}) => {\r\n  const TranslateString = useI18n()\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n  const displayBalance = rawStakedBalance.toLocaleString()\r\n\r\n  const [onPresentDeposit] = useModal(<DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />)\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return rawStakedBalance === 0 ? (\r\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake')}</Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" />\r\n        </IconButton>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\r\n          <AddIcon color=\"primary\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport styled from 'styled-components'\nimport useStake from '../../../../hooks/useStake'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst BalanceAndCompound = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-direction: column;\n`\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const TranslateString = useI18n()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const { onStake } = useStake(pid)\n\n  const rawEarningsBalance = getBalanceNumber(earnings)\n  const displayBalance = rawEarningsBalance.toLocaleString()\n\n  return (\n    <Flex mb='8px' justifyContent='space-between' alignItems='center'>\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      <BalanceAndCompound>\n        {pid === 3 ?\n          <Button\n            disabled={rawEarningsBalance === 0 || pendingTx}\n            size='sm'\n            variant='secondary'\n            marginBottom='15px'\n            onClick={async () => {\n              setPendingTx(true)\n              await onStake(rawEarningsBalance.toString())\n              setPendingTx(false)\n            }}\n          >\n            {TranslateString(999, 'Compound')}\n          </Button>\n          : null}\n        <Button\n          disabled={rawEarningsBalance === 0 || pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            setPendingTx(false)\n          }}\n        >\n          {TranslateString(999, 'Harvest')}\n        </Button>\n      </BalanceAndCompound>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useMemo, useState, useCallback } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { provider } from 'web3-core'\r\nimport { getContract } from 'utils/erc20'\r\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\r\nimport { Farm } from 'state/types'\r\nimport { useFarmFromPid, useFarmFromSymbol, useFarmUser } from 'state/hooks'\r\nimport useI18n from 'hooks/useI18n'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  ethereum?: provider\r\n  account?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\r\n  const TranslateString = useI18n()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.pid)\r\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\r\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID];\r\n  const lpName = farm.lpSymbol.toUpperCase()\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const lpContract = useMemo(() => {\r\n    if(isTokenOnly){\r\n      return getContract(ethereum as provider, tokenAddress);\r\n    }\r\n    return getContract(ethereum as provider, lpAddress);\r\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\r\n\r\n  const { onApprove } = useApprove(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction stakedBalance={stakedBalance} tokenBalance={tokenBalance} tokenName={lpName} pid={pid} depositFeeBP={depositFeeBP} />\r\n    ) : (\r\n      <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\r\n        {TranslateString(999, 'Approve Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          FLIX\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(999, 'Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} />\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {lpName}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(999, 'Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\r\nimport { Address } from 'config/constants/types'\r\n\r\ninterface ApyCalculatorModalProps {\r\n  onDismiss?: () => void\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apy?: BigNumber\r\n  quoteTokenAdresses?: Address\r\n  quoteTokenSymbol?: string\r\n  tokenAddresses: Address\r\n}\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-template-rows: repeat(4, auto);\r\n  margin-bottom: 24px;\r\n`\r\n\r\nconst GridItem = styled.div`\r\n  margin-bottom: '10px';\r\n`\r\n\r\nconst Description = styled(Text)`\r\n  max-width: 320px;\r\n  margin-bottom: 28px;\r\n`\r\n\r\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\r\n  onDismiss,\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n  cakePrice,\r\n  apy,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\r\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\r\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\r\n\r\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\r\n\r\n  return (\r\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\r\n      <Grid>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(999, 'Timeframe')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(999, 'ROI')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(999, 'FLIX per $1000')}\r\n          </Text>\r\n        </GridItem>\r\n        {/* 1 day row */}\r\n        <GridItem>\r\n          <Text>1d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand1D}</Text>\r\n        </GridItem>\r\n        {/* 7 day row */}\r\n        <GridItem>\r\n          <Text>7d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand7D}</Text>\r\n        </GridItem>\r\n        {/* 30 day row */}\r\n        <GridItem>\r\n          <Text>30d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand30D}</Text>\r\n        </GridItem>\r\n        {/* 365 day / APY row */}\r\n        <GridItem>\r\n          <Text>365d(APY)</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand365D}</Text>\r\n        </GridItem>\r\n      </Grid>\r\n      <Description fontSize=\"12px\" color=\"textSubtle\">\r\n        {TranslateString(\r\n          999,\r\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\r\n        )}\r\n      </Description>\r\n      <Flex justifyContent=\"center\">\r\n        <LinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\r\n          {TranslateString(999, 'Get')} {lpLabel}\r\n        </LinkExternal>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ApyCalculatorModal\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { CalculateIcon, IconButton, useModal } from '@pancakeswap-libs/uikit'\r\nimport { Address } from 'config/constants/types'\r\nimport ApyCalculatorModal from './ApyCalculatorModal'\r\n\r\nexport interface ApyButtonProps {\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apy?: BigNumber\r\n  quoteTokenAdresses?: Address\r\n  quoteTokenSymbol?: string\r\n  tokenAddresses: Address\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n  cakePrice,\r\n  apy,\r\n}) => {\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal\r\n      lpLabel={lpLabel}\r\n      quoteTokenAdresses={quoteTokenAdresses}\r\n      quoteTokenSymbol={quoteTokenSymbol}\r\n      tokenAddresses={tokenAddresses}\r\n      cakePrice={cakePrice}\r\n      apy={apy}\r\n    />,\r\n  )\r\n\r\n  return (\r\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\r\n      <CalculateIcon />\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React, { useMemo, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\nimport { communityFarms } from 'config/constants'\nimport { Farm } from 'state/types'\nimport { provider } from 'web3-core'\nimport useI18n from 'hooks/useI18n'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { QuoteToken } from 'config/constants/types'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\nconst RainbowLight = keyframes`\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(45deg,\n  rgba(255, 0, 0, 1) 0%,\n  rgba(255, 154, 0, 1) 10%,\n  rgba(208, 222, 33, 1) 20%,\n  rgba(79, 220, 74, 1) 30%,\n  rgba(63, 218, 216, 1) 40%,\n  rgba(47, 201, 226, 1) 50%,\n  rgba(28, 127, 238, 1) 60%,\n  rgba(95, 21, 242, 1) 70%,\n  rgba(186, 12, 248, 1) 80%,\n  rgba(251, 7, 217, 1) 90%,\n  rgba(255, 0, 0, 1) 100%);\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 16px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst FCard = styled.div`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 32px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  bnbPrice?: BigNumber\n  ethereum?: provider\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account }) => {\n  const TranslateString = useI18n()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\n //  const farmImage = farm.isTokenOnly ? farm.tokenSymbol.toLowerCase() : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\n  const farmImage = farm.lpSymbol.split(' ')[0].toLowerCase()\n\n  const totalValue: BigNumber = useMemo(() => {\n    if (!farm.lpTotalInQuoteToken) {\n      return null\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n      return cakePrice.times(farm.lpTotalInQuoteToken)\n    }\n    return farm.lpTotalInQuoteToken\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\n\n  const totalValueFormated = totalValue\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n\n  const lpLabel = farm.lpSymbol\n  const earnLabel = 'FLIX'\n  const farmAPY = farm.apy && farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  })\n\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk } = farm\n\n  return (\n    <FCard >\n      {farm.tokenSymbol === 'FLIX' || <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        risk={risk}\n        depositFee={farm.depositFeeBP}\n        farmImage={farmImage}\n        tokenSymbol={farm.tokenSymbol}\n      />\n      {!removed && (\n        <Flex justifyContent='space-between' alignItems='center'>\n          <Text>{TranslateString(352, 'APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apy ? (\n              <>\n                <ApyButton\n                  lpLabel={lpLabel}\n                  quoteTokenAdresses={quoteTokenAdresses}\n                  quoteTokenSymbol={quoteTokenSymbol}\n                  tokenAddresses={tokenAddresses}\n                  cakePrice={cakePrice}\n                  apy={farm.apy}\n                />\n                {farmAPY}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent='space-between'>\n        <Text>{TranslateString(318, 'Earn')}:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <Flex justifyContent='space-between'>\n        <Text style={{ fontSize: '24px' }}>{TranslateString(10001, 'Deposit Fee')}:</Text>\n        <Text bold style={{ fontSize: '24px' }}>{(farm.depositFeeBP / 100)}%</Text>\n      </Flex>\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          isTokenOnly={farm.isTokenOnly}\n          bscScanAddress={\n            farm.isTokenOnly ?\n              `https://bscscan.com/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n              :\n              `https://bscscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\n          }\n          totalValueFormated={totalValueFormated}\n          lpLabel={lpLabel}\n          quoteTokenAdresses={quoteTokenAdresses}\n          quoteTokenSymbol={quoteTokenSymbol}\n          tokenAddresses={tokenAddresses}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React, {useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useRouteMatch, Link } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem, Text, Toggle } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\n\r\nconst FarmTabButtons = ({ stakedOnly, setStakedOnly}) => {\r\n  const { url, isExact } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n\r\n  const [index, setIndex] = useState(0);\r\n  \r\n  const handleClick = (newIndex) => setIndex(newIndex);\r\n  return (\r\n    <Wrapper>\r\n      <ToggleWrapper>\r\n        <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} />\r\n        <Text> {TranslateString(699, 'Staked only')}</Text>\r\n      </ToggleWrapper>\r\n      <ButtonMenu activeIndex={index} size=\"sm\" variant=\"subtle\" onClick={handleClick}>\r\n        <ButtonMenuItem as={Link} to={`${url}`}>\r\n        <Text>All</Text>\r\n        </ButtonMenuItem>\r\n        <ButtonMenuItem as={Link} to={`${url}/ngthy`}>\r\n        <Text>NGHTY</Text>\r\n        </ButtonMenuItem>\r\n        <ButtonMenuItem as={Link} to={`${url}/busd`}>\r\n        <Text>BUSD</Text>\r\n        </ButtonMenuItem>\r\n        <ButtonMenuItem as={Link} to={`${url}/bnb`}>\r\n        <Text>BNB</Text>\r\n        </ButtonMenuItem>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default FarmTabButtons\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-bottom: 32px;\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-right: 32px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`","import styled from 'styled-components'\r\n\r\nexport default styled.div`\r\n  background-color: ${({ theme }) => theme.colors.textSubtle};\r\n  height: 1px;\r\n  margin: 0 auto 32px;\r\n  width: 100%;\r\n`\r\n","import React, { useEffect, useCallback, useState } from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { Image, Heading } from '@pancakeswap-libs/uikit'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport Divider from './components/Divider'\n\nexport interface FarmsProps{\n  tokenMode?: boolean\n}\n\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const bnbPrice = usePriceBnbBusd()\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  console.log(account)\n  const {tokenMode} = farmsProps;\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  console.log(farmsLP)\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stakedOnly, setStakedOnly] = useState(false)\n\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X')\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n  \n  const pastaOnlyFarms = activeFarms.filter(\n    (farm) => farm.lpSymbol.startsWith(\"NGTHY\"),\n\n  )\n  const busdOnlyFarms = activeFarms.filter(\n    (farm) => farm.lpSymbol.includes(\"BUSD\") \n  )\n\n  const bnbOnlyFarms = activeFarms.filter(\n    (farm) => farm.lpSymbol.includes(\"BNB\") \n  )\n\n  const stakedBusdOnlyFarms = busdOnlyFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n  const stakedBnbOnlyFarms = bnbOnlyFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n  const stakedPastaOnlyFarms = pastaOnlyFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n  \n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n        //   return farm\n        // }\n               const cakeRewardPerBlock = new BigNumber(farm.pastaPerBlock || 1).times(new BigNumber(farm.poolWeight)) .div(new BigNumber(10).pow(18))\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n        const cakeRewardPerMonth = cakeRewardPerYear.div(12)\n\n        let apy = cakePrice.times(cakeRewardPerYear);\n        if (farm.quoteTokenSymbol === QuoteToken.NGTHY) {\n          apy = cakePrice.times(cakeRewardPerMonth);\n        }\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0);\n\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n          totalValue = totalValue.times(bnbPrice);\n        }\n\n        if(totalValue.comparedTo(0) > 0){\n          apy = apy.div(totalValue);\n        }\n\n        return { ...farm, apy }\n      })\n      return farmsToDisplayWithAPY.map((farm) => (\n        <FarmCard\n          key={farm.pid}\n          farm={farm}\n          removed={removed}\n          bnbPrice={bnbPrice}\n          cakePrice={cakePrice}\n          ethereum={ethereum}\n          account={account}\n        />\n      ))\n    },\n    [bnbPrice, account, cakePrice, ethereum],\n  )\n\n// stakedOnly={stakedOnly} setStakedOnly={setStakedOnly}\n// pastaOnly={pastOnly} setPastaOnly={setPastaOnly}\n\n  return (\n    <Page>\n      <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n        { \n          tokenMode ?\n            'Dont waist your Naughty to watch the videos Stake tokens to earn NGTHY'\n            :\n          'Stake your LP tokens to earn NGTHY'\n        }\n      </Heading>\n      <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n        Dont waist your Naughty to watch the videos\n      </Heading>\n      <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly}/>\n      <div>\n        <Divider />\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\n          </Route>\n          <Route exact path={`${path}/ngthy`}>\n          {stakedOnly ? farmsList(stakedPastaOnlyFarms, false) : farmsList(pastaOnlyFarms, false)}\n          </Route>\n          <Route exact path={`${path}/busd`}>\n            {stakedOnly ? farmsList(stakedBusdOnlyFarms, false) : farmsList(busdOnlyFarms, false)}\n          </Route>\n          <Route exact path={`${path}/bnb`}>\n            {stakedOnly ? farmsList(stakedBnbOnlyFarms, false) : farmsList(bnbOnlyFarms, false)}\n          </Route>\n        </FlexLayout>\n      </div>\n      <Image src=\"/images/egg/8.png\" alt=\"illustration\" width={1352} height={587} responsive />\n    </Page>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}